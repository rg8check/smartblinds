
c:/Users/richa/Documents/School/2019-2020_Classes/EGR_190/Python_files/smartblinds/Test/target/1.4.4/photon/Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  080a0018  080a0018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00001d44  080a001c  080a001c  0001001c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  40024000  080a1d60  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         0000006c  20000000  080a1d64  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000005a4  2000006c  2000006c  0003006c  2**2
                  ALLOC
  6 .module_info_suffix 00000028  080a1dd0  080a1dd0  00021dd0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  080a1df8  080a1df8  00021df8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000917d1  00000000  00000000  00021dfc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000da7a  00000000  00000000  000b35cd  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000e0f8  00000000  00000000  000c1047  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00001b00  00000000  00000000  000cf13f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00002850  00000000  00000000  000d0c3f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00022da2  00000000  00000000  000d348f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0001f89a  00000000  00000000  000f6231  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0009f758  00000000  00000000  00115acb  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000a8f4  00000000  00000000  001b5224  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080a001c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a001c:	4809      	ldr	r0, [pc, #36]	; (80a0044 <link_dynalib_end+0x28>)
 80a001e:	490a      	ldr	r1, [pc, #40]	; (80a0048 <link_dynalib_end+0x2c>)
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
 80a0020:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0022:	4288      	cmp	r0, r1
 80a0024:	d005      	beq.n	80a0032 <module_user_pre_init+0x16>
 80a0026:	4a09      	ldr	r2, [pc, #36]	; (80a004c <link_dynalib_end+0x30>)
 80a0028:	4282      	cmp	r2, r0
 80a002a:	d002      	beq.n	80a0032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a002c:	1a12      	subs	r2, r2, r0
 80a002e:	f001 fcd5 	bl	80a19dc <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0032:	4807      	ldr	r0, [pc, #28]	; (80a0050 <link_dynalib_end+0x34>)
 80a0034:	4a07      	ldr	r2, [pc, #28]	; (80a0054 <link_dynalib_end+0x38>)
 80a0036:	2100      	movs	r1, #0
 80a0038:	1a12      	subs	r2, r2, r0
 80a003a:	f001 fcda 	bl	80a19f2 <memset>
    return &link_heap_start;
}
 80a003e:	4806      	ldr	r0, [pc, #24]	; (80a0058 <link_dynalib_end+0x3c>)
 80a0040:	bd08      	pop	{r3, pc}
 80a0042:	bf00      	nop
 80a0044:	20000000 	.word	0x20000000
 80a0048:	080a1d64 	.word	0x080a1d64
 80a004c:	2000006c 	.word	0x2000006c
 80a0050:	2000006c 	.word	0x2000006c
 80a0054:	20000610 	.word	0x20000610
 80a0058:	20000610 	.word	0x20000610

080a005c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a005c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a005e:	f000 fbc5 	bl	80a07ec <module_user_init_hook>
 80a0062:	4b07      	ldr	r3, [pc, #28]	; (80a0080 <module_user_init+0x24>)
 80a0064:	4c07      	ldr	r4, [pc, #28]	; (80a0084 <module_user_init+0x28>)
 80a0066:	461e      	mov	r6, r3
 80a0068:	1ae4      	subs	r4, r4, r3
 80a006a:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a006c:	2500      	movs	r5, #0
 80a006e:	42a5      	cmp	r5, r4
 80a0070:	d004      	beq.n	80a007c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
 80a0072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80a0076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0078:	3501      	adds	r5, #1
 80a007a:	e7f8      	b.n	80a006e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a007c:	bd70      	pop	{r4, r5, r6, pc}
 80a007e:	bf00      	nop
 80a0080:	080a1d20 	.word	0x080a1d20
 80a0084:	080a1d54 	.word	0x080a1d54

080a0088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a0088:	f000 b812 	b.w	80a00b0 <setup>

080a008c <module_user_loop>:
}

void module_user_loop() {
 80a008c:	b508      	push	{r3, lr}
    loop();
 80a008e:	f000 f853 	bl	80a0138 <loop>
    _post_loop();
}
 80a0092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
 80a0096:	f000 bb6b 	b.w	80a0770 <_post_loop>

080a009a <_ZdlPv>:
 80a009a:	f000 ba19 	b.w	80a04d0 <free>

080a009e <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a009e:	7800      	ldrb	r0, [r0, #0]
 80a00a0:	fab0 f080 	clz	r0, r0
 80a00a4:	0940      	lsrs	r0, r0, #5
 80a00a6:	4770      	bx	lr

080a00a8 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00a8:	2301      	movs	r3, #1
 80a00aa:	7003      	strb	r3, [r0, #0]
 80a00ac:	4770      	bx	lr
	...

080a00b0 <setup>:




// // setup() runs once, when the device is first turned on.
void setup() {
 80a00b0:	b508      	push	{r3, lr}
Serial.begin(57600);
 80a00b2:	f000 fc9b 	bl	80a09ec <_Z16_fetch_usbserialv>
 80a00b6:	f44f 4161 	mov.w	r1, #57600	; 0xe100
 80a00ba:	f000 fc7d 	bl	80a09b8 <_ZN9USBSerial5beginEl>
Serial.println("initialising");
 80a00be:	f000 fc95 	bl	80a09ec <_Z16_fetch_usbserialv>
 80a00c2:	4904      	ldr	r1, [pc, #16]	; (80a00d4 <setup+0x24>)
 80a00c4:	f000 faa9 	bl	80a061a <_ZN5Print7printlnEPKc>
//delay(100); - probably not needed.
Wire.begin();
 80a00c8:	f000 feca 	bl	80a0e60 <_Z19__fetch_global_Wirev>

}
 80a00cc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
// // setup() runs once, when the device is first turned on.
void setup() {
Serial.begin(57600);
Serial.println("initialising");
//delay(100); - probably not needed.
Wire.begin();
 80a00d0:	f000 bdaa 	b.w	80a0c28 <_ZN7TwoWire5beginEv>
 80a00d4:	080a1a78 	.word	0x080a1a78

080a00d8 <_Z11BH1750_Readi>:
   //This will sleep the ATMEGA microcontroller, Analog to digital converter, and Brownout detector
   //Works best on non-arduino boards
  }
}
//reads data from the BH1750. Typically returns 2. 
int BH1750_Read(int address){
 80a00d8:	b538      	push	{r3, r4, r5, lr}
 80a00da:	4604      	mov	r4, r0
   int byteNum = 0; //stores which bytes have been collected

  Wire.requestFrom(address,2); // collects two bytes from the BH1750
 80a00dc:	f000 fec0 	bl	80a0e60 <_Z19__fetch_global_Wirev>
 80a00e0:	4621      	mov	r1, r4
 80a00e2:	2202      	movs	r2, #2
 80a00e4:	f000 fdaf 	bl	80a0c46 <_ZN7TwoWire11requestFromEii>
  while(Wire.available()){
    buff[byteNum] = Wire.read(); // receives one byte
 80a00e8:	4d08      	ldr	r5, [pc, #32]	; (80a010c <_Z11BH1750_Readi+0x34>)
   //Works best on non-arduino boards
  }
}
//reads data from the BH1750. Typically returns 2. 
int BH1750_Read(int address){
   int byteNum = 0; //stores which bytes have been collected
 80a00ea:	2400      	movs	r4, #0

  Wire.requestFrom(address,2); // collects two bytes from the BH1750
  while(Wire.available()){
 80a00ec:	f000 feb8 	bl	80a0e60 <_Z19__fetch_global_Wirev>
 80a00f0:	6803      	ldr	r3, [r0, #0]
 80a00f2:	691b      	ldr	r3, [r3, #16]
 80a00f4:	4798      	blx	r3
 80a00f6:	b138      	cbz	r0, 80a0108 <_Z11BH1750_Readi+0x30>
    buff[byteNum] = Wire.read(); // receives one byte
 80a00f8:	f000 feb2 	bl	80a0e60 <_Z19__fetch_global_Wirev>
 80a00fc:	6803      	ldr	r3, [r0, #0]
 80a00fe:	695b      	ldr	r3, [r3, #20]
 80a0100:	4798      	blx	r3
 80a0102:	5528      	strb	r0, [r5, r4]
    byteNum++;
 80a0104:	3401      	adds	r4, #1
//reads data from the BH1750. Typically returns 2. 
int BH1750_Read(int address){
   int byteNum = 0; //stores which bytes have been collected

  Wire.requestFrom(address,2); // collects two bytes from the BH1750
  while(Wire.available()){
 80a0106:	e7f1      	b.n	80a00ec <_Z11BH1750_Readi+0x14>
    buff[byteNum] = Wire.read(); // receives one byte
    byteNum++;
  }

  return byteNum; // used to signal when two bytes have been read
}
 80a0108:	4620      	mov	r0, r4
 80a010a:	bd38      	pop	{r3, r4, r5, pc}
 80a010c:	20000080 	.word	0x20000080

080a0110 <_Z11BH1750_Initi>:
// initializes the BH1750. I'll be honest - this is a black box
//Don't mess with this
void BH1750_Init(int address){
 80a0110:	b510      	push	{r4, lr}
 80a0112:	4604      	mov	r4, r0
  Wire.beginTransmission(address); 
 80a0114:	f000 fea4 	bl	80a0e60 <_Z19__fetch_global_Wirev>
 80a0118:	4621      	mov	r1, r4
 80a011a:	f000 fd9d 	bl	80a0c58 <_ZN7TwoWire17beginTransmissionEi>
  Wire.write(0X10);
 80a011e:	f000 fe9f 	bl	80a0e60 <_Z19__fetch_global_Wirev>
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
 80a0122:	6803      	ldr	r3, [r0, #0]
 80a0124:	2110      	movs	r1, #16
 80a0126:	689b      	ldr	r3, [r3, #8]
 80a0128:	4798      	blx	r3
  Wire.endTransmission();
 80a012a:	f000 fe99 	bl	80a0e60 <_Z19__fetch_global_Wirev>
 80a012e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
// initializes the BH1750. I'll be honest - this is a black box
//Don't mess with this
void BH1750_Init(int address){
  Wire.beginTransmission(address); 
  Wire.write(0X10);
  Wire.endTransmission();
 80a0132:	f000 bd98 	b.w	80a0c66 <_ZN7TwoWire15endTransmissionEv>
	...

080a0138 <loop>:
Wire.begin();

}

// loop() runs over and over again, as quickly as it can execute.
void loop() {
 80a0138:	b538      	push	{r3, r4, r5, lr}
int iterNum = 24;
  if(collectionNum < iterNum){ // number of iterations before sleeping
 80a013a:	4b1c      	ldr	r3, [pc, #112]	; (80a01ac <loop+0x74>)
 80a013c:	681a      	ldr	r2, [r3, #0]
 80a013e:	461c      	mov	r4, r3
 80a0140:	2a17      	cmp	r2, #23
 80a0142:	dc30      	bgt.n	80a01a6 <loop+0x6e>
    BH1750_Init(BH1750address); // initializes the I2C connection
 80a0144:	4d1a      	ldr	r5, [pc, #104]	; (80a01b0 <loop+0x78>)
 80a0146:	6828      	ldr	r0, [r5, #0]
 80a0148:	f7ff ffe2 	bl	80a0110 <_Z11BH1750_Initi>
    if(BH1750_Read(BH1750address) == NUM_BYTES){
 80a014c:	6828      	ldr	r0, [r5, #0]
 80a014e:	f7ff ffc3 	bl	80a00d8 <_Z11BH1750_Readi>
 80a0152:	2802      	cmp	r0, #2
 80a0154:	d104      	bne.n	80a0160 <loop+0x28>
        Serial.println("correct read count"); // checks if 2 values were read from the BH1750
 80a0156:	f000 fc49 	bl	80a09ec <_Z16_fetch_usbserialv>
 80a015a:	4916      	ldr	r1, [pc, #88]	; (80a01b4 <loop+0x7c>)
 80a015c:	f000 fa5d 	bl	80a061a <_ZN5Print7printlnEPKc>
    }
    /* 
     *  since val is an unsigned 16 bit integer, this next code will essential append buff[1] to the end of 
     *  buff[0]. It shifts buff[0] 8 bits left first. See datasheet for more information
     */
    float Nval = ((((buff[0]<<8)|buff[1])/1.2) - 5)*160/1000; 
 80a0160:	4b15      	ldr	r3, [pc, #84]	; (80a01b8 <loop+0x80>)
    int mid = (int) Nval; // this just casts this to an int
 80a0162:	7818      	ldrb	r0, [r3, #0]
 80a0164:	785b      	ldrb	r3, [r3, #1]
 80a0166:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
 80a016a:	f001 f93b 	bl	80a13e4 <__aeabi_i2d>
 80a016e:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 80a0172:	4b12      	ldr	r3, [pc, #72]	; (80a01bc <loop+0x84>)
 80a0174:	f001 fac6 	bl	80a1704 <__aeabi_ddiv>
 80a0178:	2200      	movs	r2, #0
 80a017a:	4b11      	ldr	r3, [pc, #68]	; (80a01c0 <loop+0x88>)
 80a017c:	f000 ffe4 	bl	80a1148 <__aeabi_dsub>
 80a0180:	2200      	movs	r2, #0
 80a0182:	4b10      	ldr	r3, [pc, #64]	; (80a01c4 <loop+0x8c>)
 80a0184:	f001 f994 	bl	80a14b0 <__aeabi_dmul>
 80a0188:	2200      	movs	r2, #0
 80a018a:	4b0f      	ldr	r3, [pc, #60]	; (80a01c8 <loop+0x90>)
 80a018c:	f001 faba 	bl	80a1704 <__aeabi_ddiv>
 80a0190:	f001 fba0 	bl	80a18d4 <__aeabi_d2f>
 80a0194:	f001 fbee 	bl	80a1974 <__aeabi_f2iz>
    }
    else{
      fin = 159;
    }
    // writes values to servos and or steppers
    myServo.write(fin);
 80a0198:	289f      	cmp	r0, #159	; 0x9f
 80a019a:	4601      	mov	r1, r0
 80a019c:	bfa8      	it	ge
 80a019e:	219f      	movge	r1, #159	; 0x9f
 80a01a0:	480a      	ldr	r0, [pc, #40]	; (80a01cc <loop+0x94>)
 80a01a2:	f000 f9ca 	bl	80a053a <_ZN5Servo5writeEi>
  else{ // sleeps after adjusting for a while
    for(int i = 0; i < 24; i++){
      sleep();
    }
  }
  collectionNum = 0; //resets the collection number
 80a01a6:	2300      	movs	r3, #0
 80a01a8:	6023      	str	r3, [r4, #0]
 80a01aa:	bd38      	pop	{r3, r4, r5, pc}
 80a01ac:	20000084 	.word	0x20000084
 80a01b0:	20000000 	.word	0x20000000
 80a01b4:	080a1a85 	.word	0x080a1a85
 80a01b8:	20000080 	.word	0x20000080
 80a01bc:	3ff33333 	.word	0x3ff33333
 80a01c0:	40140000 	.word	0x40140000
 80a01c4:	40640000 	.word	0x40640000
 80a01c8:	408f4000 	.word	0x408f4000
 80a01cc:	20000070 	.word	0x20000070

080a01d0 <_GLOBAL__sub_I_myServo>:
//Don't mess with this
void BH1750_Init(int address){
  Wire.beginTransmission(address); 
  Wire.write(0X10);
  Wire.endTransmission();
 80a01d0:	b508      	push	{r3, lr}
inline int32_t pinReadFast(pin_t _pin)
{
    return ((PIN_MAP[_pin].gpio_peripheral->IDR & PIN_MAP[_pin].gpio_pin) == 0 ? LOW : HIGH);
}
#elif defined(STM32F2XX)
static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
 80a01d2:	f000 f807 	bl	80a01e4 <HAL_Pin_Map>
 80a01d6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
//Lets include some libaries
//#include <lowPower.h>
#include <math.h>

//Lets  create some variables
Servo myServo;
 80a01da:	4801      	ldr	r0, [pc, #4]	; (80a01e0 <_GLOBAL__sub_I_myServo+0x10>)
 80a01dc:	f000 b9d8 	b.w	80a0590 <_ZN5ServoC1Ev>
 80a01e0:	20000070 	.word	0x20000070

080a01e4 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
 80a01e4:	b508      	push	{r3, lr}
 80a01e6:	4b02      	ldr	r3, [pc, #8]	; (80a01f0 <HAL_Pin_Map+0xc>)
 80a01e8:	681b      	ldr	r3, [r3, #0]
 80a01ea:	681b      	ldr	r3, [r3, #0]
 80a01ec:	9301      	str	r3, [sp, #4]
 80a01ee:	bd08      	pop	{r3, pc}
 80a01f0:	080601b0 	.word	0x080601b0

080a01f4 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
 80a01f4:	b508      	push	{r3, lr}
 80a01f6:	4b02      	ldr	r3, [pc, #8]	; (80a0200 <HAL_SPI_Init+0xc>)
 80a01f8:	681b      	ldr	r3, [r3, #0]
 80a01fa:	69db      	ldr	r3, [r3, #28]
 80a01fc:	9301      	str	r3, [sp, #4]
 80a01fe:	bd08      	pop	{r3, pc}
 80a0200:	080601b4 	.word	0x080601b4

080a0204 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a0204:	b508      	push	{r3, lr}
 80a0206:	4b02      	ldr	r3, [pc, #8]	; (80a0210 <HAL_RNG_GetRandomNumber+0xc>)
 80a0208:	681b      	ldr	r3, [r3, #0]
 80a020a:	685b      	ldr	r3, [r3, #4]
 80a020c:	9301      	str	r3, [sp, #4]
 80a020e:	bd08      	pop	{r3, pc}
 80a0210:	0806019c 	.word	0x0806019c

080a0214 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a0214:	b508      	push	{r3, lr}
 80a0216:	4b02      	ldr	r3, [pc, #8]	; (80a0220 <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a0218:	681b      	ldr	r3, [r3, #0]
 80a021a:	695b      	ldr	r3, [r3, #20]
 80a021c:	9301      	str	r3, [sp, #4]
 80a021e:	bd08      	pop	{r3, pc}
 80a0220:	0806019c 	.word	0x0806019c

080a0224 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
 80a0224:	b508      	push	{r3, lr}
 80a0226:	4b02      	ldr	r3, [pc, #8]	; (80a0230 <os_mutex_create+0xc>)
 80a0228:	681b      	ldr	r3, [r3, #0]
 80a022a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a022c:	9301      	str	r3, [sp, #4]
 80a022e:	bd08      	pop	{r3, pc}
 80a0230:	080601d0 	.word	0x080601d0

080a0234 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
 80a0234:	b508      	push	{r3, lr}
 80a0236:	4b02      	ldr	r3, [pc, #8]	; (80a0240 <HAL_USART_Init+0xc>)
 80a0238:	681b      	ldr	r3, [r3, #0]
 80a023a:	699b      	ldr	r3, [r3, #24]
 80a023c:	9301      	str	r3, [sp, #4]
 80a023e:	bd08      	pop	{r3, pc}
 80a0240:	080601c4 	.word	0x080601c4

080a0244 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
 80a0244:	b508      	push	{r3, lr}
 80a0246:	4b02      	ldr	r3, [pc, #8]	; (80a0250 <HAL_USART_Write_Data+0xc>)
 80a0248:	681b      	ldr	r3, [r3, #0]
 80a024a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a024c:	9301      	str	r3, [sp, #4]
 80a024e:	bd08      	pop	{r3, pc}
 80a0250:	080601c4 	.word	0x080601c4

080a0254 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
 80a0254:	b508      	push	{r3, lr}
 80a0256:	4b02      	ldr	r3, [pc, #8]	; (80a0260 <HAL_USART_Available_Data+0xc>)
 80a0258:	681b      	ldr	r3, [r3, #0]
 80a025a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a025c:	9301      	str	r3, [sp, #4]
 80a025e:	bd08      	pop	{r3, pc}
 80a0260:	080601c4 	.word	0x080601c4

080a0264 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
 80a0264:	b508      	push	{r3, lr}
 80a0266:	4b02      	ldr	r3, [pc, #8]	; (80a0270 <HAL_USART_Read_Data+0xc>)
 80a0268:	681b      	ldr	r3, [r3, #0]
 80a026a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a026c:	9301      	str	r3, [sp, #4]
 80a026e:	bd08      	pop	{r3, pc}
 80a0270:	080601c4 	.word	0x080601c4

080a0274 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
 80a0274:	b508      	push	{r3, lr}
 80a0276:	4b02      	ldr	r3, [pc, #8]	; (80a0280 <HAL_USART_Peek_Data+0xc>)
 80a0278:	681b      	ldr	r3, [r3, #0]
 80a027a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a027c:	9301      	str	r3, [sp, #4]
 80a027e:	bd08      	pop	{r3, pc}
 80a0280:	080601c4 	.word	0x080601c4

080a0284 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
 80a0284:	b508      	push	{r3, lr}
 80a0286:	4b02      	ldr	r3, [pc, #8]	; (80a0290 <HAL_USART_Flush_Data+0xc>)
 80a0288:	681b      	ldr	r3, [r3, #0]
 80a028a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a028c:	9301      	str	r3, [sp, #4]
 80a028e:	bd08      	pop	{r3, pc}
 80a0290:	080601c4 	.word	0x080601c4

080a0294 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
 80a0294:	b508      	push	{r3, lr}
 80a0296:	4b02      	ldr	r3, [pc, #8]	; (80a02a0 <HAL_USART_Available_Data_For_Write+0xc>)
 80a0298:	681b      	ldr	r3, [r3, #0]
 80a029a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a029c:	9301      	str	r3, [sp, #4]
 80a029e:	bd08      	pop	{r3, pc}
 80a02a0:	080601c4 	.word	0x080601c4

080a02a4 <HAL_I2C_Begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
 80a02a4:	b508      	push	{r3, lr}
 80a02a6:	4b02      	ldr	r3, [pc, #8]	; (80a02b0 <HAL_I2C_Begin+0xc>)
 80a02a8:	681b      	ldr	r3, [r3, #0]
 80a02aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a02ac:	9301      	str	r3, [sp, #4]
 80a02ae:	bd08      	pop	{r3, pc}
 80a02b0:	080601ac 	.word	0x080601ac

080a02b4 <HAL_I2C_Request_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
 80a02b4:	b508      	push	{r3, lr}
 80a02b6:	4b02      	ldr	r3, [pc, #8]	; (80a02c0 <HAL_I2C_Request_Data+0xc>)
 80a02b8:	681b      	ldr	r3, [r3, #0]
 80a02ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80a02bc:	9301      	str	r3, [sp, #4]
 80a02be:	bd08      	pop	{r3, pc}
 80a02c0:	080601ac 	.word	0x080601ac

080a02c4 <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
 80a02c4:	b508      	push	{r3, lr}
 80a02c6:	4b02      	ldr	r3, [pc, #8]	; (80a02d0 <HAL_I2C_Begin_Transmission+0xc>)
 80a02c8:	681b      	ldr	r3, [r3, #0]
 80a02ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a02cc:	9301      	str	r3, [sp, #4]
 80a02ce:	bd08      	pop	{r3, pc}
 80a02d0:	080601ac 	.word	0x080601ac

080a02d4 <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
 80a02d4:	b508      	push	{r3, lr}
 80a02d6:	4b02      	ldr	r3, [pc, #8]	; (80a02e0 <HAL_I2C_End_Transmission+0xc>)
 80a02d8:	681b      	ldr	r3, [r3, #0]
 80a02da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80a02dc:	9301      	str	r3, [sp, #4]
 80a02de:	bd08      	pop	{r3, pc}
 80a02e0:	080601ac 	.word	0x080601ac

080a02e4 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
 80a02e4:	b508      	push	{r3, lr}
 80a02e6:	4b02      	ldr	r3, [pc, #8]	; (80a02f0 <HAL_I2C_Write_Data+0xc>)
 80a02e8:	681b      	ldr	r3, [r3, #0]
 80a02ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a02ec:	9301      	str	r3, [sp, #4]
 80a02ee:	bd08      	pop	{r3, pc}
 80a02f0:	080601ac 	.word	0x080601ac

080a02f4 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
 80a02f4:	b508      	push	{r3, lr}
 80a02f6:	4b02      	ldr	r3, [pc, #8]	; (80a0300 <HAL_I2C_Available_Data+0xc>)
 80a02f8:	681b      	ldr	r3, [r3, #0]
 80a02fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a02fc:	9301      	str	r3, [sp, #4]
 80a02fe:	bd08      	pop	{r3, pc}
 80a0300:	080601ac 	.word	0x080601ac

080a0304 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
 80a0304:	b508      	push	{r3, lr}
 80a0306:	4b02      	ldr	r3, [pc, #8]	; (80a0310 <HAL_I2C_Read_Data+0xc>)
 80a0308:	681b      	ldr	r3, [r3, #0]
 80a030a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a030c:	9301      	str	r3, [sp, #4]
 80a030e:	bd08      	pop	{r3, pc}
 80a0310:	080601ac 	.word	0x080601ac

080a0314 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
 80a0314:	b508      	push	{r3, lr}
 80a0316:	4b02      	ldr	r3, [pc, #8]	; (80a0320 <HAL_I2C_Peek_Data+0xc>)
 80a0318:	681b      	ldr	r3, [r3, #0]
 80a031a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a031c:	9301      	str	r3, [sp, #4]
 80a031e:	bd08      	pop	{r3, pc}
 80a0320:	080601ac 	.word	0x080601ac

080a0324 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
 80a0324:	b508      	push	{r3, lr}
 80a0326:	4b02      	ldr	r3, [pc, #8]	; (80a0330 <HAL_I2C_Flush_Data+0xc>)
 80a0328:	681b      	ldr	r3, [r3, #0]
 80a032a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a032c:	9301      	str	r3, [sp, #4]
 80a032e:	bd08      	pop	{r3, pc}
 80a0330:	080601ac 	.word	0x080601ac

080a0334 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
 80a0334:	b508      	push	{r3, lr}
 80a0336:	4b03      	ldr	r3, [pc, #12]	; (80a0344 <HAL_I2C_Init+0x10>)
 80a0338:	681b      	ldr	r3, [r3, #0]
 80a033a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80a033e:	9301      	str	r3, [sp, #4]
 80a0340:	bd08      	pop	{r3, pc}
 80a0342:	0000      	.short	0x0000
 80a0344:	080601ac 	.word	0x080601ac

080a0348 <HAL_Servo_Write_Pulse_Width>:
DYNALIB_FN(2, hal_peripherals, HAL_Tone_Get_Frequency, uint32_t(uint8_t))
DYNALIB_FN(3, hal_peripherals, HAL_Tone_Is_Stopped, bool(uint8_t))

DYNALIB_FN(4, hal_peripherals, HAL_Servo_Attach, void(uint16_t))
DYNALIB_FN(5, hal_peripherals, HAL_Servo_Detach, void(uint16_t))
DYNALIB_FN(6, hal_peripherals, HAL_Servo_Write_Pulse_Width, void(uint16_t, uint16_t))
 80a0348:	b508      	push	{r3, lr}
 80a034a:	4b02      	ldr	r3, [pc, #8]	; (80a0354 <HAL_Servo_Write_Pulse_Width+0xc>)
 80a034c:	681b      	ldr	r3, [r3, #0]
 80a034e:	699b      	ldr	r3, [r3, #24]
 80a0350:	9301      	str	r3, [sp, #4]
 80a0352:	bd08      	pop	{r3, pc}
 80a0354:	080601a8 	.word	0x080601a8

080a0358 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a0358:	b508      	push	{r3, lr}
 80a035a:	4b02      	ldr	r3, [pc, #8]	; (80a0364 <HAL_USB_USART_Init+0xc>)
 80a035c:	681b      	ldr	r3, [r3, #0]
 80a035e:	681b      	ldr	r3, [r3, #0]
 80a0360:	9301      	str	r3, [sp, #4]
 80a0362:	bd08      	pop	{r3, pc}
 80a0364:	080601d8 	.word	0x080601d8

080a0368 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 80a0368:	b508      	push	{r3, lr}
 80a036a:	4b02      	ldr	r3, [pc, #8]	; (80a0374 <HAL_USB_USART_Begin+0xc>)
 80a036c:	681b      	ldr	r3, [r3, #0]
 80a036e:	685b      	ldr	r3, [r3, #4]
 80a0370:	9301      	str	r3, [sp, #4]
 80a0372:	bd08      	pop	{r3, pc}
 80a0374:	080601d8 	.word	0x080601d8

080a0378 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a0378:	b508      	push	{r3, lr}
 80a037a:	4b02      	ldr	r3, [pc, #8]	; (80a0384 <HAL_USB_USART_Available_Data+0xc>)
 80a037c:	681b      	ldr	r3, [r3, #0]
 80a037e:	691b      	ldr	r3, [r3, #16]
 80a0380:	9301      	str	r3, [sp, #4]
 80a0382:	bd08      	pop	{r3, pc}
 80a0384:	080601d8 	.word	0x080601d8

080a0388 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a0388:	b508      	push	{r3, lr}
 80a038a:	4b02      	ldr	r3, [pc, #8]	; (80a0394 <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a038c:	681b      	ldr	r3, [r3, #0]
 80a038e:	695b      	ldr	r3, [r3, #20]
 80a0390:	9301      	str	r3, [sp, #4]
 80a0392:	bd08      	pop	{r3, pc}
 80a0394:	080601d8 	.word	0x080601d8

080a0398 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a0398:	b508      	push	{r3, lr}
 80a039a:	4b02      	ldr	r3, [pc, #8]	; (80a03a4 <HAL_USB_USART_Receive_Data+0xc>)
 80a039c:	681b      	ldr	r3, [r3, #0]
 80a039e:	699b      	ldr	r3, [r3, #24]
 80a03a0:	9301      	str	r3, [sp, #4]
 80a03a2:	bd08      	pop	{r3, pc}
 80a03a4:	080601d8 	.word	0x080601d8

080a03a8 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a03a8:	b508      	push	{r3, lr}
 80a03aa:	4b02      	ldr	r3, [pc, #8]	; (80a03b4 <HAL_USB_USART_Send_Data+0xc>)
 80a03ac:	681b      	ldr	r3, [r3, #0]
 80a03ae:	69db      	ldr	r3, [r3, #28]
 80a03b0:	9301      	str	r3, [sp, #4]
 80a03b2:	bd08      	pop	{r3, pc}
 80a03b4:	080601d8 	.word	0x080601d8

080a03b8 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a03b8:	b508      	push	{r3, lr}
 80a03ba:	4b02      	ldr	r3, [pc, #8]	; (80a03c4 <HAL_USB_USART_Flush_Data+0xc>)
 80a03bc:	681b      	ldr	r3, [r3, #0]
 80a03be:	6a1b      	ldr	r3, [r3, #32]
 80a03c0:	9301      	str	r3, [sp, #4]
 80a03c2:	bd08      	pop	{r3, pc}
 80a03c4:	080601d8 	.word	0x080601d8

080a03c8 <inet_gethostbyname>:
DYNALIB_FN(14, hal_wlan, wlan_set_error_count, void(uint32_t))
DYNALIB_FN(15, hal_wlan, wlan_fetch_ipconfig, int(WLanConfig*))
DYNALIB_FN(16, hal_wlan, wlan_setup, void(void))

DYNALIB_FN(17, hal_wlan, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(18, hal_wlan, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80a03c8:	b508      	push	{r3, lr}
 80a03ca:	4b02      	ldr	r3, [pc, #8]	; (80a03d4 <inet_gethostbyname+0xc>)
 80a03cc:	681b      	ldr	r3, [r3, #0]
 80a03ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a03d0:	9301      	str	r3, [sp, #4]
 80a03d2:	bd08      	pop	{r3, pc}
 80a03d4:	080601c0 	.word	0x080601c0

080a03d8 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a03d8:	b508      	push	{r3, lr}
 80a03da:	4b02      	ldr	r3, [pc, #8]	; (80a03e4 <set_system_mode+0xc>)
 80a03dc:	681b      	ldr	r3, [r3, #0]
 80a03de:	685b      	ldr	r3, [r3, #4]
 80a03e0:	9301      	str	r3, [sp, #4]
 80a03e2:	bd08      	pop	{r3, pc}
 80a03e4:	080601a4 	.word	0x080601a4

080a03e8 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80a03e8:	b508      	push	{r3, lr}
 80a03ea:	4b03      	ldr	r3, [pc, #12]	; (80a03f8 <system_ctrl_set_app_request_handler+0x10>)
 80a03ec:	681b      	ldr	r3, [r3, #0]
 80a03ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a03f2:	9301      	str	r3, [sp, #4]
 80a03f4:	bd08      	pop	{r3, pc}
 80a03f6:	0000      	.short	0x0000
 80a03f8:	080601a4 	.word	0x080601a4

080a03fc <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80a03fc:	b508      	push	{r3, lr}
 80a03fe:	4b03      	ldr	r3, [pc, #12]	; (80a040c <system_ctrl_set_result+0x10>)
 80a0400:	681b      	ldr	r3, [r3, #0]
 80a0402:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80a0406:	9301      	str	r3, [sp, #4]
 80a0408:	bd08      	pop	{r3, pc}
 80a040a:	0000      	.short	0x0000
 80a040c:	080601a4 	.word	0x080601a4

080a0410 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 80a0410:	b508      	push	{r3, lr}
 80a0412:	4b02      	ldr	r3, [pc, #8]	; (80a041c <network_connect+0xc>)
 80a0414:	681b      	ldr	r3, [r3, #0]
 80a0416:	685b      	ldr	r3, [r3, #4]
 80a0418:	9301      	str	r3, [sp, #4]
 80a041a:	bd08      	pop	{r3, pc}
 80a041c:	080601c8 	.word	0x080601c8

080a0420 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 80a0420:	b508      	push	{r3, lr}
 80a0422:	4b02      	ldr	r3, [pc, #8]	; (80a042c <network_connecting+0xc>)
 80a0424:	681b      	ldr	r3, [r3, #0]
 80a0426:	689b      	ldr	r3, [r3, #8]
 80a0428:	9301      	str	r3, [sp, #4]
 80a042a:	bd08      	pop	{r3, pc}
 80a042c:	080601c8 	.word	0x080601c8

080a0430 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 80a0430:	b508      	push	{r3, lr}
 80a0432:	4b02      	ldr	r3, [pc, #8]	; (80a043c <network_disconnect+0xc>)
 80a0434:	681b      	ldr	r3, [r3, #0]
 80a0436:	68db      	ldr	r3, [r3, #12]
 80a0438:	9301      	str	r3, [sp, #4]
 80a043a:	bd08      	pop	{r3, pc}
 80a043c:	080601c8 	.word	0x080601c8

080a0440 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a0440:	b508      	push	{r3, lr}
 80a0442:	4b02      	ldr	r3, [pc, #8]	; (80a044c <network_ready+0xc>)
 80a0444:	681b      	ldr	r3, [r3, #0]
 80a0446:	691b      	ldr	r3, [r3, #16]
 80a0448:	9301      	str	r3, [sp, #4]
 80a044a:	bd08      	pop	{r3, pc}
 80a044c:	080601c8 	.word	0x080601c8

080a0450 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 80a0450:	b508      	push	{r3, lr}
 80a0452:	4b02      	ldr	r3, [pc, #8]	; (80a045c <network_on+0xc>)
 80a0454:	681b      	ldr	r3, [r3, #0]
 80a0456:	695b      	ldr	r3, [r3, #20]
 80a0458:	9301      	str	r3, [sp, #4]
 80a045a:	bd08      	pop	{r3, pc}
 80a045c:	080601c8 	.word	0x080601c8

080a0460 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 80a0460:	b508      	push	{r3, lr}
 80a0462:	4b02      	ldr	r3, [pc, #8]	; (80a046c <network_off+0xc>)
 80a0464:	681b      	ldr	r3, [r3, #0]
 80a0466:	699b      	ldr	r3, [r3, #24]
 80a0468:	9301      	str	r3, [sp, #4]
 80a046a:	bd08      	pop	{r3, pc}
 80a046c:	080601c8 	.word	0x080601c8

080a0470 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 80a0470:	b508      	push	{r3, lr}
 80a0472:	4b02      	ldr	r3, [pc, #8]	; (80a047c <network_listen+0xc>)
 80a0474:	681b      	ldr	r3, [r3, #0]
 80a0476:	69db      	ldr	r3, [r3, #28]
 80a0478:	9301      	str	r3, [sp, #4]
 80a047a:	bd08      	pop	{r3, pc}
 80a047c:	080601c8 	.word	0x080601c8

080a0480 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 80a0480:	b508      	push	{r3, lr}
 80a0482:	4b02      	ldr	r3, [pc, #8]	; (80a048c <network_listening+0xc>)
 80a0484:	681b      	ldr	r3, [r3, #0]
 80a0486:	6a1b      	ldr	r3, [r3, #32]
 80a0488:	9301      	str	r3, [sp, #4]
 80a048a:	bd08      	pop	{r3, pc}
 80a048c:	080601c8 	.word	0x080601c8

080a0490 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 80a0490:	b508      	push	{r3, lr}
 80a0492:	4b02      	ldr	r3, [pc, #8]	; (80a049c <network_set_listen_timeout+0xc>)
 80a0494:	681b      	ldr	r3, [r3, #0]
 80a0496:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0498:	9301      	str	r3, [sp, #4]
 80a049a:	bd08      	pop	{r3, pc}
 80a049c:	080601c8 	.word	0x080601c8

080a04a0 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 80a04a0:	b508      	push	{r3, lr}
 80a04a2:	4b02      	ldr	r3, [pc, #8]	; (80a04ac <network_get_listen_timeout+0xc>)
 80a04a4:	681b      	ldr	r3, [r3, #0]
 80a04a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a04a8:	9301      	str	r3, [sp, #4]
 80a04aa:	bd08      	pop	{r3, pc}
 80a04ac:	080601c8 	.word	0x080601c8

080a04b0 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 80a04b0:	b508      	push	{r3, lr}
 80a04b2:	4b02      	ldr	r3, [pc, #8]	; (80a04bc <spark_set_random_seed_from_cloud_handler+0xc>)
 80a04b4:	681b      	ldr	r3, [r3, #0]
 80a04b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a04b8:	9301      	str	r3, [sp, #4]
 80a04ba:	bd08      	pop	{r3, pc}
 80a04bc:	080601cc 	.word	0x080601cc

080a04c0 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80a04c0:	b508      	push	{r3, lr}
 80a04c2:	4b02      	ldr	r3, [pc, #8]	; (80a04cc <malloc+0xc>)
 80a04c4:	681b      	ldr	r3, [r3, #0]
 80a04c6:	681b      	ldr	r3, [r3, #0]
 80a04c8:	9301      	str	r3, [sp, #4]
 80a04ca:	bd08      	pop	{r3, pc}
 80a04cc:	080601a0 	.word	0x080601a0

080a04d0 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80a04d0:	b508      	push	{r3, lr}
 80a04d2:	4b02      	ldr	r3, [pc, #8]	; (80a04dc <free+0xc>)
 80a04d4:	681b      	ldr	r3, [r3, #0]
 80a04d6:	685b      	ldr	r3, [r3, #4]
 80a04d8:	9301      	str	r3, [sp, #4]
 80a04da:	bd08      	pop	{r3, pc}
 80a04dc:	080601a0 	.word	0x080601a0

080a04e0 <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
 80a04e0:	4770      	bx	lr

080a04e2 <_ZN8SPIClassD0Ev>:
 80a04e2:	b510      	push	{r4, lr}
 80a04e4:	4604      	mov	r4, r0
 80a04e6:	2110      	movs	r1, #16
 80a04e8:	f000 fcdf 	bl	80a0eaa <_ZdlPvj>
 80a04ec:	4620      	mov	r0, r4
 80a04ee:	bd10      	pop	{r4, pc}

080a04f0 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
 80a04f0:	b570      	push	{r4, r5, r6, lr}
 80a04f2:	4604      	mov	r4, r0
 80a04f4:	460e      	mov	r6, r1
 80a04f6:	4b07      	ldr	r3, [pc, #28]	; (80a0514 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
 80a04f8:	2500      	movs	r5, #0
 80a04fa:	6003      	str	r3, [r0, #0]
 80a04fc:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
 80a0500:	f7ff fe90 	bl	80a0224 <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
 80a0504:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
 80a0506:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
 80a0508:	f7ff fe74 	bl	80a01f4 <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
 80a050c:	60a5      	str	r5, [r4, #8]
}
 80a050e:	4620      	mov	r0, r4
 80a0510:	bd70      	pop	{r4, r5, r6, pc}
 80a0512:	bf00      	nop
 80a0514:	080a1aa0 	.word	0x080a1aa0

080a0518 <_ZN5Servo17writeMicrosecondsEt>:
  // write(179).
  return a == this->minAngle || a == this->maxAngle ? a : a + 1;
}

void Servo::writeMicroseconds(uint16_t pulseWidth)
{
 80a0518:	f9b0 2000 	ldrsh.w	r2, [r0]

  if (!this->attached())
 80a051c:	1c53      	adds	r3, r2, #1
 80a051e:	d00b      	beq.n	80a0538 <_ZN5Servo17writeMicrosecondsEt+0x20>
  {
    return;
  }

  pulseWidth = constrain(pulseWidth, this->minPW, this->maxPW);
 80a0520:	8843      	ldrh	r3, [r0, #2]
 80a0522:	8880      	ldrh	r0, [r0, #4]
typename std::common_type<T, U>::type
min (T a, U b) { return static_cast<typename std::common_type<T, U>::type>((a)<(b)?(a):(b)); }

template <typename T, typename U, typename V>
static inline
T constrain (T amt, U low, V high) { return ((amt)<(low)?(low):((amt)>(high)?(high):(amt))); }
 80a0524:	428b      	cmp	r3, r1
 80a0526:	d803      	bhi.n	80a0530 <_ZN5Servo17writeMicrosecondsEt+0x18>
 80a0528:	4288      	cmp	r0, r1
 80a052a:	4603      	mov	r3, r0
 80a052c:	bf28      	it	cs
 80a052e:	460b      	movcs	r3, r1

  HAL_Servo_Write_Pulse_Width(this->pin, pulseWidth);
 80a0530:	4619      	mov	r1, r3
 80a0532:	b290      	uxth	r0, r2
 80a0534:	f7ff bf08 	b.w	80a0348 <HAL_Servo_Write_Pulse_Width>
 80a0538:	4770      	bx	lr

080a053a <_ZN5Servo5writeEi>:

  return true;
}

void Servo::write(int degrees)
{
 80a053a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a053c:	4604      	mov	r4, r0
 80a053e:	4608      	mov	r0, r1
 80a0540:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
  degrees = constrain(degrees, this->minAngle, this->maxAngle);
 80a0544:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
 80a0548:	4281      	cmp	r1, r0
 80a054a:	dc03      	bgt.n	80a0554 <_ZN5Servo5writeEi+0x1a>
 80a054c:	4290      	cmp	r0, r2
 80a054e:	bfa8      	it	ge
 80a0550:	4610      	movge	r0, r2
 80a0552:	e000      	b.n	80a0556 <_ZN5Servo5writeEi+0x1c>
 80a0554:	4608      	mov	r0, r1
  this->writeMicroseconds(ANGLE_TO_US(degrees)+trim);
 80a0556:	88a5      	ldrh	r5, [r4, #4]
 80a0558:	8863      	ldrh	r3, [r4, #2]
 80a055a:	9500      	str	r5, [sp, #0]
 80a055c:	f000 f8ac 	bl	80a06b8 <_Z3mapiiiii>
 80a0560:	68e1      	ldr	r1, [r4, #12]
 80a0562:	4401      	add	r1, r0
 80a0564:	4620      	mov	r0, r4
 80a0566:	b289      	uxth	r1, r1
}
 80a0568:	b003      	add	sp, #12
 80a056a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
}

void Servo::write(int degrees)
{
  degrees = constrain(degrees, this->minAngle, this->maxAngle);
  this->writeMicroseconds(ANGLE_TO_US(degrees)+trim);
 80a056e:	f7ff bfd3 	b.w	80a0518 <_ZN5Servo17writeMicrosecondsEt>

080a0572 <_ZN5Servo11resetFieldsEv>:
  return HAL_Servo_Read_Pulse_Width(this->pin);
}

void Servo::resetFields(void)
{
  this->pin = NOT_ATTACHED;
 80a0572:	f64f 73ff 	movw	r3, #65535	; 0xffff
  this->minAngle = SERVO_DEFAULT_MIN_ANGLE;
  this->maxAngle = SERVO_DEFAULT_MAX_ANGLE;
 80a0576:	22b4      	movs	r2, #180	; 0xb4
 80a0578:	8102      	strh	r2, [r0, #8]
  this->minPW = SERVO_DEFAULT_MIN_PW;
 80a057a:	f44f 7208 	mov.w	r2, #544	; 0x220
  return HAL_Servo_Read_Pulse_Width(this->pin);
}

void Servo::resetFields(void)
{
  this->pin = NOT_ATTACHED;
 80a057e:	8003      	strh	r3, [r0, #0]
  this->minAngle = SERVO_DEFAULT_MIN_ANGLE;
  this->maxAngle = SERVO_DEFAULT_MAX_ANGLE;
  this->minPW = SERVO_DEFAULT_MIN_PW;
 80a0580:	8042      	strh	r2, [r0, #2]
}

void Servo::resetFields(void)
{
  this->pin = NOT_ATTACHED;
  this->minAngle = SERVO_DEFAULT_MIN_ANGLE;
 80a0582:	2300      	movs	r3, #0
  this->maxAngle = SERVO_DEFAULT_MAX_ANGLE;
  this->minPW = SERVO_DEFAULT_MIN_PW;
  this->maxPW = SERVO_DEFAULT_MAX_PW;
 80a0584:	f44f 6216 	mov.w	r2, #2400	; 0x960
}

void Servo::resetFields(void)
{
  this->pin = NOT_ATTACHED;
  this->minAngle = SERVO_DEFAULT_MIN_ANGLE;
 80a0588:	80c3      	strh	r3, [r0, #6]
  this->maxAngle = SERVO_DEFAULT_MAX_ANGLE;
  this->minPW = SERVO_DEFAULT_MIN_PW;
  this->maxPW = SERVO_DEFAULT_MAX_PW;
 80a058a:	8082      	strh	r2, [r0, #4]
  this->trim = 0;
 80a058c:	60c3      	str	r3, [r0, #12]
 80a058e:	4770      	bx	lr

080a0590 <_ZN5ServoC1Ev>:
#define ANGLE_TO_US(a)    ((uint16_t)(map((a), this->minAngle, this->maxAngle, \
                                        this->minPW, this->maxPW)))
#define US_TO_ANGLE(us)   ((int16_t)(map((us), this->minPW, this->maxPW,  \
                                       this->minAngle, this->maxAngle)))

Servo::Servo()
 80a0590:	b508      	push	{r3, lr}
{
  this->resetFields();
 80a0592:	f7ff ffee 	bl	80a0572 <_ZN5Servo11resetFieldsEv>
}
 80a0596:	bd08      	pop	{r3, pc}

080a0598 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 80a0598:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80a059c:	4b03      	ldr	r3, [pc, #12]	; (80a05ac <_GLOBAL__sub_I_System+0x14>)
 80a059e:	2000      	movs	r0, #0
 80a05a0:	7018      	strb	r0, [r3, #0]
 80a05a2:	8058      	strh	r0, [r3, #2]
 80a05a4:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a05a6:	f7ff bf17 	b.w	80a03d8 <set_system_mode>
 80a05aa:	bf00      	nop
 80a05ac:	20000088 	.word	0x20000088

080a05b0 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a05b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a05b2:	4606      	mov	r6, r0
 80a05b4:	460d      	mov	r5, r1
 80a05b6:	188f      	adds	r7, r1, r2
  size_t n = 0;
 80a05b8:	2400      	movs	r4, #0
  while (size--) {
 80a05ba:	42bd      	cmp	r5, r7
 80a05bc:	d00c      	beq.n	80a05d8 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a05be:	6833      	ldr	r3, [r6, #0]
 80a05c0:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a05c4:	689b      	ldr	r3, [r3, #8]
 80a05c6:	4630      	mov	r0, r6
 80a05c8:	4798      	blx	r3
     if (chunk>=0)
 80a05ca:	2800      	cmp	r0, #0
 80a05cc:	db01      	blt.n	80a05d2 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a05ce:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
 80a05d0:	e7f3      	b.n	80a05ba <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80a05d2:	2c00      	cmp	r4, #0
 80a05d4:	bf08      	it	eq
 80a05d6:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
 80a05d8:	4620      	mov	r0, r4
 80a05da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a05dc <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 80a05dc:	b570      	push	{r4, r5, r6, lr}
 80a05de:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a05e0:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 80a05e2:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
 80a05e4:	b149      	cbz	r1, 80a05fa <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a05e6:	f001 fa35 	bl	80a1a54 <strlen>
 80a05ea:	682b      	ldr	r3, [r5, #0]
 80a05ec:	4602      	mov	r2, r0
 80a05ee:	4621      	mov	r1, r4
 80a05f0:	4628      	mov	r0, r5
    }
 80a05f2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
 80a05f6:	68db      	ldr	r3, [r3, #12]
 80a05f8:	4718      	bx	r3
    }
 80a05fa:	bd70      	pop	{r4, r5, r6, pc}

080a05fc <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 80a05fc:	6803      	ldr	r3, [r0, #0]
 80a05fe:	689b      	ldr	r3, [r3, #8]
 80a0600:	4718      	bx	r3

080a0602 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a0602:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 80a0604:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a0606:	4605      	mov	r5, r0
  size_t n = print('\r');
 80a0608:	f7ff fff8 	bl	80a05fc <_ZN5Print5printEc>
  n += print('\n');
 80a060c:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
 80a060e:	4604      	mov	r4, r0
  n += print('\n');
 80a0610:	4628      	mov	r0, r5
 80a0612:	f7ff fff3 	bl	80a05fc <_ZN5Print5printEc>
  return n;
}
 80a0616:	4420      	add	r0, r4
 80a0618:	bd38      	pop	{r3, r4, r5, pc}

080a061a <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 80a061a:	b538      	push	{r3, r4, r5, lr}
 80a061c:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a061e:	f7ff ffdd 	bl	80a05dc <_ZN5Print5writeEPKc>
 80a0622:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
 80a0624:	4628      	mov	r0, r5
 80a0626:	f7ff ffec 	bl	80a0602 <_ZN5Print7printlnEv>
  return n;
}
 80a062a:	4420      	add	r0, r4
 80a062c:	bd38      	pop	{r3, r4, r5, pc}

080a062e <_ZN5Print11printNumberEmh>:
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a062e:	2a01      	cmp	r2, #1
 80a0630:	bf98      	it	ls
 80a0632:	220a      	movls	r2, #10
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a0634:	b530      	push	{r4, r5, lr}
 80a0636:	460b      	mov	r3, r1
 80a0638:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a063a:	2100      	movs	r1, #0
 80a063c:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 80a0640:	f10d 0423 	add.w	r4, sp, #35	; 0x23
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
 80a0644:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
 80a0648:	fb05 3312 	mls	r3, r5, r2, r3
 80a064c:	b2db      	uxtb	r3, r3
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a064e:	2b09      	cmp	r3, #9
 80a0650:	bf94      	ite	ls
 80a0652:	3330      	addls	r3, #48	; 0x30
 80a0654:	3337      	addhi	r3, #55	; 0x37
 80a0656:	b2db      	uxtb	r3, r3
 80a0658:	4621      	mov	r1, r4
 80a065a:	f804 3901 	strb.w	r3, [r4], #-1
 80a065e:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
 80a0660:	2d00      	cmp	r5, #0
 80a0662:	d1ef      	bne.n	80a0644 <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
 80a0664:	f7ff ffba 	bl	80a05dc <_ZN5Print5writeEPKc>
}
 80a0668:	b00b      	add	sp, #44	; 0x2c
 80a066a:	bd30      	pop	{r4, r5, pc}

080a066c <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
 80a066c:	b410      	push	{r4}
  if (base == 0) return write(n);
 80a066e:	b922      	cbnz	r2, 80a067a <_ZN5Print5printEmi+0xe>
 80a0670:	6803      	ldr	r3, [r0, #0]
 80a0672:	b2c9      	uxtb	r1, r1
 80a0674:	689b      	ldr	r3, [r3, #8]
  else return printNumber(n, base);
}
 80a0676:	bc10      	pop	{r4}
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
 80a0678:	4718      	bx	r3
  else return printNumber(n, base);
 80a067a:	b2d2      	uxtb	r2, r2
}
 80a067c:	bc10      	pop	{r4}
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 80a067e:	f7ff bfd6 	b.w	80a062e <_ZN5Print11printNumberEmh>

080a0682 <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
 80a0682:	f7ff bff3 	b.w	80a066c <_ZN5Print5printEmi>

080a0686 <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
 80a0686:	2300      	movs	r3, #0
 80a0688:	461a      	mov	r2, r3
 80a068a:	4619      	mov	r1, r3
 80a068c:	6840      	ldr	r0, [r0, #4]
 80a068e:	f7ff bedf 	b.w	80a0450 <network_on>
	...

080a0694 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80a0694:	4a01      	ldr	r2, [pc, #4]	; (80a069c <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a0696:	4b02      	ldr	r3, [pc, #8]	; (80a06a0 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a0698:	601a      	str	r2, [r3, #0]
 80a069a:	4770      	bx	lr
 80a069c:	080a1b1e 	.word	0x080a1b1e
 80a06a0:	20000090 	.word	0x20000090

080a06a4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a06a4:	4b02      	ldr	r3, [pc, #8]	; (80a06b0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a06a6:	681a      	ldr	r2, [r3, #0]
 80a06a8:	4b02      	ldr	r3, [pc, #8]	; (80a06b4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a06aa:	601a      	str	r2, [r3, #0]
 80a06ac:	4770      	bx	lr
 80a06ae:	bf00      	nop
 80a06b0:	20000004 	.word	0x20000004
 80a06b4:	20000094 	.word	0x20000094

080a06b8 <_Z3mapiiiii>:
    HAL_ADC_Set_Sample_Time(ADC_SampleTime);
}

int map(int value, int fromStart, int fromEnd, int toStart, int toEnd)
{
    if (fromEnd == fromStart) {
 80a06b8:	428a      	cmp	r2, r1
{
    HAL_ADC_Set_Sample_Time(ADC_SampleTime);
}

int map(int value, int fromStart, int fromEnd, int toStart, int toEnd)
{
 80a06ba:	b530      	push	{r4, r5, lr}
    if (fromEnd == fromStart) {
 80a06bc:	d007      	beq.n	80a06ce <_Z3mapiiiii+0x16>
        return value;
    }
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
 80a06be:	9d03      	ldr	r5, [sp, #12]
 80a06c0:	1a44      	subs	r4, r0, r1
 80a06c2:	1aed      	subs	r5, r5, r3
 80a06c4:	436c      	muls	r4, r5
 80a06c6:	1a52      	subs	r2, r2, r1
 80a06c8:	fb94 f4f2 	sdiv	r4, r4, r2
 80a06cc:	18e0      	adds	r0, r4, r3
}
 80a06ce:	bd30      	pop	{r4, r5, pc}

080a06d0 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a06d0:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 80a06d2:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a06d4:	4604      	mov	r4, r0
    {
      if (_M_manager)
 80a06d6:	b113      	cbz	r3, 80a06de <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a06d8:	2203      	movs	r2, #3
 80a06da:	4601      	mov	r1, r0
 80a06dc:	4798      	blx	r3
    }
 80a06de:	4620      	mov	r0, r4
 80a06e0:	bd10      	pop	{r4, pc}

080a06e2 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 80a06e2:	b510      	push	{r4, lr}
 80a06e4:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a06e6:	f7ff fff3 	bl	80a06d0 <_ZNSt14_Function_baseD1Ev>
 80a06ea:	4620      	mov	r0, r4
 80a06ec:	bd10      	pop	{r4, pc}
	...

080a06f0 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a06f0:	4803      	ldr	r0, [pc, #12]	; (80a0700 <_GLOBAL__sub_I_RGB+0x10>)
 80a06f2:	2300      	movs	r3, #0
 80a06f4:	6083      	str	r3, [r0, #8]
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 80a06f6:	4a03      	ldr	r2, [pc, #12]	; (80a0704 <_GLOBAL__sub_I_RGB+0x14>)
 80a06f8:	4903      	ldr	r1, [pc, #12]	; (80a0708 <_GLOBAL__sub_I_RGB+0x18>)
 80a06fa:	f000 bbd1 	b.w	80a0ea0 <__aeabi_atexit>
 80a06fe:	bf00      	nop
 80a0700:	20000098 	.word	0x20000098
 80a0704:	2000006c 	.word	0x2000006c
 80a0708:	080a06e3 	.word	0x080a06e3

080a070c <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
 80a070c:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a070e:	4b14      	ldr	r3, [pc, #80]	; (80a0760 <serialEventRun+0x54>)
 80a0710:	b133      	cbz	r3, 80a0720 <serialEventRun+0x14>
 80a0712:	f000 f96b 	bl	80a09ec <_Z16_fetch_usbserialv>
 80a0716:	6803      	ldr	r3, [r0, #0]
 80a0718:	691b      	ldr	r3, [r3, #16]
 80a071a:	4798      	blx	r3
 80a071c:	2800      	cmp	r0, #0
 80a071e:	dc16      	bgt.n	80a074e <serialEventRun+0x42>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
 80a0720:	4b10      	ldr	r3, [pc, #64]	; (80a0764 <serialEventRun+0x58>)
 80a0722:	b133      	cbz	r3, 80a0732 <serialEventRun+0x26>
 80a0724:	f000 fa1c 	bl	80a0b60 <_Z22__fetch_global_Serial1v>
 80a0728:	6803      	ldr	r3, [r0, #0]
 80a072a:	691b      	ldr	r3, [r3, #16]
 80a072c:	4798      	blx	r3
 80a072e:	2800      	cmp	r0, #0
 80a0730:	dc10      	bgt.n	80a0754 <serialEventRun+0x48>
        serialEvent1();

#if Wiring_Serial2
    if (serialEventRun2) serialEventRun2();
 80a0732:	4b0d      	ldr	r3, [pc, #52]	; (80a0768 <serialEventRun+0x5c>)
 80a0734:	b10b      	cbz	r3, 80a073a <serialEventRun+0x2e>
 80a0736:	f3af 8000 	nop.w
#if Wiring_Serial5
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a073a:	4b0c      	ldr	r3, [pc, #48]	; (80a076c <serialEventRun+0x60>)
 80a073c:	b17b      	cbz	r3, 80a075e <serialEventRun+0x52>
 80a073e:	f000 f991 	bl	80a0a64 <_Z17_fetch_usbserial1v>
 80a0742:	6803      	ldr	r3, [r0, #0]
 80a0744:	691b      	ldr	r3, [r3, #16]
 80a0746:	4798      	blx	r3
 80a0748:	2800      	cmp	r0, #0
 80a074a:	dc06      	bgt.n	80a075a <serialEventRun+0x4e>
 80a074c:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
 80a074e:	f3af 8000 	nop.w
 80a0752:	e7e5      	b.n	80a0720 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
 80a0754:	f3af 8000 	nop.w
 80a0758:	e7eb      	b.n	80a0732 <serialEventRun+0x26>
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
        usbSerialEvent1();
 80a075a:	f3af 8000 	nop.w
 80a075e:	bd08      	pop	{r3, pc}
	...

080a0770 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
 80a0770:	b508      	push	{r3, lr}
	serialEventRun();
 80a0772:	f7ff ffcb 	bl	80a070c <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a0776:	f7ff fd4d 	bl	80a0214 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a077a:	4b01      	ldr	r3, [pc, #4]	; (80a0780 <_post_loop+0x10>)
 80a077c:	6018      	str	r0, [r3, #0]
 80a077e:	bd08      	pop	{r3, pc}
 80a0780:	2000053c 	.word	0x2000053c

080a0784 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a0784:	4802      	ldr	r0, [pc, #8]	; (80a0790 <_Z33system_initialize_user_backup_ramv+0xc>)
 80a0786:	4a03      	ldr	r2, [pc, #12]	; (80a0794 <_Z33system_initialize_user_backup_ramv+0x10>)
 80a0788:	4903      	ldr	r1, [pc, #12]	; (80a0798 <_Z33system_initialize_user_backup_ramv+0x14>)
 80a078a:	1a12      	subs	r2, r2, r0
 80a078c:	f001 b926 	b.w	80a19dc <memcpy>
 80a0790:	40024000 	.word	0x40024000
 80a0794:	40024004 	.word	0x40024004
 80a0798:	080a1d60 	.word	0x080a1d60

080a079c <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80a079c:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a079e:	2300      	movs	r3, #0
 80a07a0:	9300      	str	r3, [sp, #0]
 80a07a2:	461a      	mov	r2, r3
 80a07a4:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a07a8:	f7ff fe28 	bl	80a03fc <system_ctrl_set_result>
}
 80a07ac:	b003      	add	sp, #12
 80a07ae:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a07b4 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
 80a07b4:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 80a07b6:	8843      	ldrh	r3, [r0, #2]
 80a07b8:	2b0a      	cmp	r3, #10
 80a07ba:	d008      	beq.n	80a07ce <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 80a07bc:	2b50      	cmp	r3, #80	; 0x50
 80a07be:	d109      	bne.n	80a07d4 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
 80a07c0:	4b09      	ldr	r3, [pc, #36]	; (80a07e8 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 80a07c2:	681b      	ldr	r3, [r3, #0]
 80a07c4:	b13b      	cbz	r3, 80a07d6 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
 80a07c6:	b003      	add	sp, #12
 80a07c8:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
 80a07cc:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
 80a07ce:	f7ff ffe5 	bl	80a079c <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
 80a07d2:	e006      	b.n	80a07e2 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a07d4:	2300      	movs	r3, #0
 80a07d6:	9300      	str	r3, [sp, #0]
 80a07d8:	461a      	mov	r2, r3
 80a07da:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a07de:	f7ff fe0d 	bl	80a03fc <system_ctrl_set_result>
        break;
    }
}
 80a07e2:	b003      	add	sp, #12
 80a07e4:	f85d fb04 	ldr.w	pc, [sp], #4
 80a07e8:	200000a8 	.word	0x200000a8

080a07ec <module_user_init_hook>:

void module_user_init_hook()
{
 80a07ec:	b538      	push	{r3, r4, r5, lr}
#if PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80a07ee:	4c10      	ldr	r4, [pc, #64]	; (80a0830 <module_user_init_hook+0x44>)
 80a07f0:	4d10      	ldr	r5, [pc, #64]	; (80a0834 <module_user_init_hook+0x48>)
 80a07f2:	6823      	ldr	r3, [r4, #0]
 80a07f4:	42ab      	cmp	r3, r5
 80a07f6:	4b10      	ldr	r3, [pc, #64]	; (80a0838 <module_user_init_hook+0x4c>)
 80a07f8:	bf0c      	ite	eq
 80a07fa:	2201      	moveq	r2, #1
 80a07fc:	2200      	movne	r2, #0
 80a07fe:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80a0800:	d002      	beq.n	80a0808 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
 80a0802:	f7ff ffbf 	bl	80a0784 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 80a0806:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 80a0808:	f7ff fcfc 	bl	80a0204 <HAL_RNG_GetRandomNumber>
 80a080c:	4604      	mov	r4, r0
    srand(seed);
 80a080e:	f001 f8f9 	bl	80a1a04 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 80a0812:	4b0a      	ldr	r3, [pc, #40]	; (80a083c <module_user_init_hook+0x50>)
 80a0814:	b113      	cbz	r3, 80a081c <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
 80a0816:	4620      	mov	r0, r4
 80a0818:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80a081c:	2100      	movs	r1, #0
 80a081e:	4807      	ldr	r0, [pc, #28]	; (80a083c <module_user_init_hook+0x50>)
 80a0820:	f7ff fe46 	bl	80a04b0 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 80a0824:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80a0828:	2100      	movs	r1, #0
 80a082a:	4805      	ldr	r0, [pc, #20]	; (80a0840 <module_user_init_hook+0x54>)
 80a082c:	f7ff bddc 	b.w	80a03e8 <system_ctrl_set_app_request_handler>
 80a0830:	40024000 	.word	0x40024000
 80a0834:	9a271c1e 	.word	0x9a271c1e
 80a0838:	200000ac 	.word	0x200000ac
 80a083c:	00000000 	.word	0x00000000
 80a0840:	080a07b5 	.word	0x080a07b5

080a0844 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a0844:	4770      	bx	lr

080a0846 <_ZN9IPAddressD0Ev>:
 80a0846:	b510      	push	{r4, lr}
 80a0848:	4604      	mov	r4, r0
 80a084a:	2118      	movs	r1, #24
 80a084c:	f000 fb2d 	bl	80a0eaa <_ZdlPvj>
 80a0850:	4620      	mov	r0, r4
 80a0852:	bd10      	pop	{r4, pc}

080a0854 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a0854:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a0856:	460f      	mov	r7, r1
 80a0858:	f100 0608 	add.w	r6, r0, #8
 80a085c:	1d05      	adds	r5, r0, #4
 80a085e:	2400      	movs	r4, #0
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a0860:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80a0864:	220a      	movs	r2, #10
 80a0866:	4638      	mov	r0, r7
 80a0868:	f7ff ff0b 	bl	80a0682 <_ZN5Print5printEhi>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a086c:	42ae      	cmp	r6, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a086e:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a0870:	d007      	beq.n	80a0882 <_ZNK9IPAddress7printToER5Print+0x2e>
    {
        if (n)
 80a0872:	2c00      	cmp	r4, #0
 80a0874:	d0f4      	beq.n	80a0860 <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a0876:	212e      	movs	r1, #46	; 0x2e
 80a0878:	4638      	mov	r0, r7
 80a087a:	f7ff febf 	bl	80a05fc <_ZN5Print5printEc>
 80a087e:	4404      	add	r4, r0
 80a0880:	e7ee      	b.n	80a0860 <_ZNK9IPAddress7printToER5Print+0xc>
        n += p.print((*this)[i], DEC);
    }
    return n;
}
 80a0882:	4620      	mov	r0, r4
 80a0884:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080a0888 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
 80a0888:	b510      	push	{r4, lr}
 80a088a:	4604      	mov	r4, r0
 80a088c:	4b04      	ldr	r3, [pc, #16]	; (80a08a0 <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80a088e:	2211      	movs	r2, #17
 80a0890:	f840 3b04 	str.w	r3, [r0], #4
 80a0894:	2100      	movs	r1, #0
 80a0896:	f001 f8ac 	bl	80a19f2 <memset>
{
    clear();
}
 80a089a:	4620      	mov	r0, r4
 80a089c:	bd10      	pop	{r4, pc}
 80a089e:	bf00      	nop
 80a08a0:	080a1bc0 	.word	0x080a1bc0

080a08a4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
 80a08a4:	4603      	mov	r3, r0
 80a08a6:	4a07      	ldr	r2, [pc, #28]	; (80a08c4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 80a08a8:	b510      	push	{r4, lr}
 80a08aa:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
 80a08ae:	f101 0210 	add.w	r2, r1, #16
 80a08b2:	f851 4b04 	ldr.w	r4, [r1], #4
 80a08b6:	4291      	cmp	r1, r2
 80a08b8:	f843 4b04 	str.w	r4, [r3], #4
 80a08bc:	d1f9      	bne.n	80a08b2 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 80a08be:	780a      	ldrb	r2, [r1, #0]
 80a08c0:	701a      	strb	r2, [r3, #0]
}
 80a08c2:	bd10      	pop	{r4, pc}
 80a08c4:	080a1bc0 	.word	0x080a1bc0

080a08c8 <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a08c8:	4a02      	ldr	r2, [pc, #8]	; (80a08d4 <_ZN9IPAddressC1Em+0xc>)
    return *this;
}

IPAddress& IPAddress::operator=(uint32_t ipv4)
{
    address.ipv4 = ipv4;
 80a08ca:	6041      	str	r1, [r0, #4]
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a08cc:	6002      	str	r2, [r0, #0]
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
 80a08ce:	2204      	movs	r2, #4
 80a08d0:	7502      	strb	r2, [r0, #20]
{
    *this = address;
}
 80a08d2:	4770      	bx	lr
 80a08d4:	080a1bc0 	.word	0x080a1bc0

080a08d8 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
 80a08d8:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a08da:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a08de:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 80a08e2:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 80a08e6:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 80a08ea:	2304      	movs	r3, #4
 80a08ec:	6041      	str	r1, [r0, #4]
 80a08ee:	7503      	strb	r3, [r0, #20]
 80a08f0:	bd10      	pop	{r4, pc}
	...

080a08f4 <_ZN9IPAddressC1Ehhhh>:
{
    memcpy(&this->address, &address, sizeof(address));
}


IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a08f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a08f6:	4d04      	ldr	r5, [pc, #16]	; (80a0908 <_ZN9IPAddressC1Ehhhh+0x14>)
 80a08f8:	6005      	str	r5, [r0, #0]
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a08fa:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80a08fe:	9500      	str	r5, [sp, #0]
 80a0900:	f7ff ffea 	bl	80a08d8 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a0904:	b003      	add	sp, #12
 80a0906:	bd30      	pop	{r4, r5, pc}
 80a0908:	080a1bc0 	.word	0x080a1bc0

080a090c <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a090c:	7441      	strb	r1, [r0, #17]
 80a090e:	4770      	bx	lr

080a0910 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 80a0910:	4770      	bx	lr

080a0912 <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
 80a0912:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 80a0914:	2100      	movs	r1, #0
 80a0916:	7c00      	ldrb	r0, [r0, #16]
 80a0918:	f7ff fd3e 	bl	80a0398 <HAL_USB_USART_Receive_Data>
}
 80a091c:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a0920:	bf28      	it	cs
 80a0922:	f04f 30ff 	movcs.w	r0, #4294967295
 80a0926:	bd08      	pop	{r3, pc}

080a0928 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
 80a0928:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 80a092a:	2101      	movs	r1, #1
 80a092c:	7c00      	ldrb	r0, [r0, #16]
 80a092e:	f7ff fd33 	bl	80a0398 <HAL_USB_USART_Receive_Data>
}
 80a0932:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a0936:	bf28      	it	cs
 80a0938:	f04f 30ff 	movcs.w	r0, #4294967295
 80a093c:	bd08      	pop	{r3, pc}

080a093e <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
 80a093e:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 80a0940:	7c00      	ldrb	r0, [r0, #16]
 80a0942:	f7ff fd21 	bl	80a0388 <HAL_USB_USART_Available_Data_For_Write>
}
 80a0946:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a094a:	bd08      	pop	{r3, pc}

080a094c <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
 80a094c:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 80a094e:	7c00      	ldrb	r0, [r0, #16]
 80a0950:	f7ff fd12 	bl	80a0378 <HAL_USB_USART_Available_Data>
}
 80a0954:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a0958:	bd08      	pop	{r3, pc}

080a095a <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
 80a095a:	7c00      	ldrb	r0, [r0, #16]
 80a095c:	f7ff bd2c 	b.w	80a03b8 <HAL_USB_USART_Flush_Data>

080a0960 <_ZN9USBSerialD0Ev>:
 80a0960:	b510      	push	{r4, lr}
 80a0962:	4604      	mov	r4, r0
 80a0964:	2114      	movs	r1, #20
 80a0966:	f000 faa0 	bl	80a0eaa <_ZdlPvj>
 80a096a:	4620      	mov	r0, r4
 80a096c:	bd10      	pop	{r4, pc}

080a096e <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 80a096e:	b538      	push	{r3, r4, r5, lr}
 80a0970:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a0972:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 80a0974:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a0976:	f7ff fd07 	bl	80a0388 <HAL_USB_USART_Available_Data_For_Write>
 80a097a:	2800      	cmp	r0, #0
 80a097c:	dc01      	bgt.n	80a0982 <_ZN9USBSerial5writeEh+0x14>
 80a097e:	7c60      	ldrb	r0, [r4, #17]
 80a0980:	b128      	cbz	r0, 80a098e <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 80a0982:	4629      	mov	r1, r5
 80a0984:	7c20      	ldrb	r0, [r4, #16]
 80a0986:	f7ff fd0f 	bl	80a03a8 <HAL_USB_USART_Send_Data>
 80a098a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
 80a098e:	bd38      	pop	{r3, r4, r5, pc}

080a0990 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a0990:	b510      	push	{r4, lr}
 80a0992:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a0994:	2300      	movs	r3, #0
 80a0996:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a0998:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a099c:	60a3      	str	r3, [r4, #8]
 80a099e:	4b05      	ldr	r3, [pc, #20]	; (80a09b4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
 80a09a0:	4608      	mov	r0, r1
 80a09a2:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
 80a09a4:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
{
  _serial = serial;
 80a09a6:	7421      	strb	r1, [r4, #16]
  _blocking = true;
 80a09a8:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
 80a09aa:	4611      	mov	r1, r2
 80a09ac:	f7ff fcd4 	bl	80a0358 <HAL_USB_USART_Init>
}
 80a09b0:	4620      	mov	r0, r4
 80a09b2:	bd10      	pop	{r4, pc}
 80a09b4:	080a1bd4 	.word	0x080a1bd4

080a09b8 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
 80a09b8:	2200      	movs	r2, #0
 80a09ba:	7c00      	ldrb	r0, [r0, #16]
 80a09bc:	f7ff bcd4 	b.w	80a0368 <HAL_USB_USART_Begin>

080a09c0 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
 80a09c0:	b510      	push	{r4, lr}
 80a09c2:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a09c4:	2214      	movs	r2, #20
 80a09c6:	2100      	movs	r1, #0
 80a09c8:	f001 f813 	bl	80a19f2 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a09cc:	4b05      	ldr	r3, [pc, #20]	; (80a09e4 <_Z19acquireSerialBufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a09ce:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a09d0:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 80a09d2:	4b05      	ldr	r3, [pc, #20]	; (80a09e8 <_Z19acquireSerialBufferv+0x28>)
 80a09d4:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a09d6:	f240 1301 	movw	r3, #257	; 0x101
 80a09da:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a09dc:	2381      	movs	r3, #129	; 0x81
 80a09de:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a09e0:	bd10      	pop	{r4, pc}
 80a09e2:	bf00      	nop
 80a09e4:	20000135 	.word	0x20000135
 80a09e8:	200000b4 	.word	0x200000b4

080a09ec <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
 80a09ec:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a09ee:	4d0e      	ldr	r5, [pc, #56]	; (80a0a28 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
 80a09f0:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a09f2:	a801      	add	r0, sp, #4
 80a09f4:	f7ff ffe4 	bl	80a09c0 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a09f8:	6829      	ldr	r1, [r5, #0]
 80a09fa:	f011 0401 	ands.w	r4, r1, #1
 80a09fe:	d110      	bne.n	80a0a22 <_Z16_fetch_usbserialv+0x36>
 80a0a00:	4628      	mov	r0, r5
 80a0a02:	f7ff fb4c 	bl	80a009e <__cxa_guard_acquire>
 80a0a06:	b160      	cbz	r0, 80a0a22 <_Z16_fetch_usbserialv+0x36>
 80a0a08:	aa01      	add	r2, sp, #4
 80a0a0a:	4621      	mov	r1, r4
 80a0a0c:	4807      	ldr	r0, [pc, #28]	; (80a0a2c <_Z16_fetch_usbserialv+0x40>)
 80a0a0e:	f7ff ffbf 	bl	80a0990 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a0a12:	4628      	mov	r0, r5
 80a0a14:	f7ff fb48 	bl	80a00a8 <__cxa_guard_release>
 80a0a18:	4a05      	ldr	r2, [pc, #20]	; (80a0a30 <_Z16_fetch_usbserialv+0x44>)
 80a0a1a:	4906      	ldr	r1, [pc, #24]	; (80a0a34 <_Z16_fetch_usbserialv+0x48>)
 80a0a1c:	4803      	ldr	r0, [pc, #12]	; (80a0a2c <_Z16_fetch_usbserialv+0x40>)
 80a0a1e:	f000 fa3f 	bl	80a0ea0 <__aeabi_atexit>
	return _usbserial;
}
 80a0a22:	4802      	ldr	r0, [pc, #8]	; (80a0a2c <_Z16_fetch_usbserialv+0x40>)
 80a0a24:	b007      	add	sp, #28
 80a0a26:	bd30      	pop	{r4, r5, pc}
 80a0a28:	200000b0 	.word	0x200000b0
 80a0a2c:	20000238 	.word	0x20000238
 80a0a30:	2000006c 	.word	0x2000006c
 80a0a34:	080a0911 	.word	0x080a0911

080a0a38 <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 80a0a38:	b510      	push	{r4, lr}
 80a0a3a:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a0a3c:	2214      	movs	r2, #20
 80a0a3e:	2100      	movs	r1, #0
 80a0a40:	f000 ffd7 	bl	80a19f2 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a0a44:	4b05      	ldr	r3, [pc, #20]	; (80a0a5c <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a0a46:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a0a48:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 80a0a4a:	4b05      	ldr	r3, [pc, #20]	; (80a0a60 <_Z23acquireUSBSerial1Bufferv+0x28>)
 80a0a4c:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a0a4e:	f240 1301 	movw	r3, #257	; 0x101
 80a0a52:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a0a54:	2381      	movs	r3, #129	; 0x81
 80a0a56:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a0a58:	bd10      	pop	{r4, pc}
 80a0a5a:	bf00      	nop
 80a0a5c:	200002e8 	.word	0x200002e8
 80a0a60:	20000250 	.word	0x20000250

080a0a64 <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 80a0a64:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a0a66:	4c0e      	ldr	r4, [pc, #56]	; (80a0aa0 <_Z17_fetch_usbserial1v+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial1()
{
 80a0a68:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a0a6a:	a801      	add	r0, sp, #4
 80a0a6c:	f7ff ffe4 	bl	80a0a38 <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a0a70:	6823      	ldr	r3, [r4, #0]
 80a0a72:	07db      	lsls	r3, r3, #31
 80a0a74:	d410      	bmi.n	80a0a98 <_Z17_fetch_usbserial1v+0x34>
 80a0a76:	4620      	mov	r0, r4
 80a0a78:	f7ff fb11 	bl	80a009e <__cxa_guard_acquire>
 80a0a7c:	b160      	cbz	r0, 80a0a98 <_Z17_fetch_usbserial1v+0x34>
 80a0a7e:	aa01      	add	r2, sp, #4
 80a0a80:	2101      	movs	r1, #1
 80a0a82:	4808      	ldr	r0, [pc, #32]	; (80a0aa4 <_Z17_fetch_usbserial1v+0x40>)
 80a0a84:	f7ff ff84 	bl	80a0990 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a0a88:	4620      	mov	r0, r4
 80a0a8a:	f7ff fb0d 	bl	80a00a8 <__cxa_guard_release>
 80a0a8e:	4a06      	ldr	r2, [pc, #24]	; (80a0aa8 <_Z17_fetch_usbserial1v+0x44>)
 80a0a90:	4906      	ldr	r1, [pc, #24]	; (80a0aac <_Z17_fetch_usbserial1v+0x48>)
 80a0a92:	4804      	ldr	r0, [pc, #16]	; (80a0aa4 <_Z17_fetch_usbserial1v+0x40>)
 80a0a94:	f000 fa04 	bl	80a0ea0 <__aeabi_atexit>
  return _usbserial1;
}
 80a0a98:	4802      	ldr	r0, [pc, #8]	; (80a0aa4 <_Z17_fetch_usbserial1v+0x40>)
 80a0a9a:	b006      	add	sp, #24
 80a0a9c:	bd10      	pop	{r4, pc}
 80a0a9e:	bf00      	nop
 80a0aa0:	2000024c 	.word	0x2000024c
 80a0aa4:	200002d4 	.word	0x200002d4
 80a0aa8:	2000006c 	.word	0x2000006c
 80a0aac:	080a0911 	.word	0x080a0911

080a0ab0 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
 80a0ab0:	4770      	bx	lr

080a0ab2 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a0ab2:	7441      	strb	r1, [r0, #17]
 80a0ab4:	4770      	bx	lr

080a0ab6 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
 80a0ab6:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
 80a0ab8:	7c00      	ldrb	r0, [r0, #16]
 80a0aba:	f7ff fbeb 	bl	80a0294 <HAL_USART_Available_Data_For_Write>
}
 80a0abe:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a0ac2:	bd08      	pop	{r3, pc}

080a0ac4 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 80a0ac4:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
 80a0ac6:	7c00      	ldrb	r0, [r0, #16]
 80a0ac8:	f7ff fbc4 	bl	80a0254 <HAL_USART_Available_Data>
}
 80a0acc:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a0ad0:	bd08      	pop	{r3, pc}

080a0ad2 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 80a0ad2:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
 80a0ad4:	7c00      	ldrb	r0, [r0, #16]
 80a0ad6:	f7ff fbcd 	bl	80a0274 <HAL_USART_Peek_Data>
}
 80a0ada:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a0ade:	bf28      	it	cs
 80a0ae0:	f04f 30ff 	movcs.w	r0, #4294967295
 80a0ae4:	bd08      	pop	{r3, pc}

080a0ae6 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 80a0ae6:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
 80a0ae8:	7c00      	ldrb	r0, [r0, #16]
 80a0aea:	f7ff fbbb 	bl	80a0264 <HAL_USART_Read_Data>
}
 80a0aee:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a0af2:	bf28      	it	cs
 80a0af4:	f04f 30ff 	movcs.w	r0, #4294967295
 80a0af8:	bd08      	pop	{r3, pc}

080a0afa <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
 80a0afa:	7c00      	ldrb	r0, [r0, #16]
 80a0afc:	f7ff bbc2 	b.w	80a0284 <HAL_USART_Flush_Data>

080a0b00 <_ZN11USARTSerialD0Ev>:
 80a0b00:	b510      	push	{r4, lr}
 80a0b02:	4604      	mov	r4, r0
 80a0b04:	2114      	movs	r1, #20
 80a0b06:	f000 f9d0 	bl	80a0eaa <_ZdlPvj>
 80a0b0a:	4620      	mov	r0, r4
 80a0b0c:	bd10      	pop	{r4, pc}

080a0b0e <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 80a0b0e:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a0b10:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
 80a0b12:	4604      	mov	r4, r0
 80a0b14:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a0b16:	b925      	cbnz	r5, 80a0b22 <_ZN11USARTSerial5writeEh+0x14>
 80a0b18:	7c00      	ldrb	r0, [r0, #16]
 80a0b1a:	f7ff fbbb 	bl	80a0294 <HAL_USART_Available_Data_For_Write>
 80a0b1e:	2800      	cmp	r0, #0
 80a0b20:	dd05      	ble.n	80a0b2e <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a0b22:	4631      	mov	r1, r6
 80a0b24:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 80a0b26:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a0b2a:	f7ff bb8b 	b.w	80a0244 <HAL_USART_Write_Data>
  }
  return 0;
}
 80a0b2e:	4628      	mov	r0, r5
 80a0b30:	bd70      	pop	{r4, r5, r6, pc}
	...

080a0b34 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a0b34:	b510      	push	{r4, lr}
 80a0b36:	4604      	mov	r4, r0
 80a0b38:	4608      	mov	r0, r1
 80a0b3a:	4611      	mov	r1, r2
 80a0b3c:	2200      	movs	r2, #0
 80a0b3e:	6062      	str	r2, [r4, #4]
 80a0b40:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a0b44:	60a2      	str	r2, [r4, #8]
 80a0b46:	4a05      	ldr	r2, [pc, #20]	; (80a0b5c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
{
  _serial = serial;
 80a0b48:	7420      	strb	r0, [r4, #16]
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a0b4a:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
 80a0b4c:	2201      	movs	r2, #1
 80a0b4e:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
 80a0b50:	461a      	mov	r2, r3
 80a0b52:	f7ff fb6f 	bl	80a0234 <HAL_USART_Init>
}
 80a0b56:	4620      	mov	r0, r4
 80a0b58:	bd10      	pop	{r4, pc}
 80a0b5a:	bf00      	nop
 80a0b5c:	080a1c04 	.word	0x080a1c04

080a0b60 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
 80a0b60:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 80a0b62:	4d0c      	ldr	r5, [pc, #48]	; (80a0b94 <_Z22__fetch_global_Serial1v+0x34>)
 80a0b64:	6829      	ldr	r1, [r5, #0]
 80a0b66:	f011 0401 	ands.w	r4, r1, #1
 80a0b6a:	d111      	bne.n	80a0b90 <_Z22__fetch_global_Serial1v+0x30>
 80a0b6c:	4628      	mov	r0, r5
 80a0b6e:	f7ff fa96 	bl	80a009e <__cxa_guard_acquire>
 80a0b72:	b168      	cbz	r0, 80a0b90 <_Z22__fetch_global_Serial1v+0x30>
 80a0b74:	4a08      	ldr	r2, [pc, #32]	; (80a0b98 <_Z22__fetch_global_Serial1v+0x38>)
 80a0b76:	4621      	mov	r1, r4
 80a0b78:	4b08      	ldr	r3, [pc, #32]	; (80a0b9c <_Z22__fetch_global_Serial1v+0x3c>)
 80a0b7a:	4809      	ldr	r0, [pc, #36]	; (80a0ba0 <_Z22__fetch_global_Serial1v+0x40>)
 80a0b7c:	f7ff ffda 	bl	80a0b34 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
 80a0b80:	4628      	mov	r0, r5
 80a0b82:	f7ff fa91 	bl	80a00a8 <__cxa_guard_release>
 80a0b86:	4a07      	ldr	r2, [pc, #28]	; (80a0ba4 <_Z22__fetch_global_Serial1v+0x44>)
 80a0b88:	4907      	ldr	r1, [pc, #28]	; (80a0ba8 <_Z22__fetch_global_Serial1v+0x48>)
 80a0b8a:	4805      	ldr	r0, [pc, #20]	; (80a0ba0 <_Z22__fetch_global_Serial1v+0x40>)
 80a0b8c:	f000 f988 	bl	80a0ea0 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
 80a0b90:	4803      	ldr	r0, [pc, #12]	; (80a0ba0 <_Z22__fetch_global_Serial1v+0x40>)
 80a0b92:	bd38      	pop	{r3, r4, r5, pc}
 80a0b94:	20000484 	.word	0x20000484
 80a0b98:	20000488 	.word	0x20000488
 80a0b9c:	20000400 	.word	0x20000400
 80a0ba0:	200003ec 	.word	0x200003ec
 80a0ba4:	2000006c 	.word	0x2000006c
 80a0ba8:	080a0ab1 	.word	0x080a0ab1

080a0bac <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
 80a0bac:	4770      	bx	lr

080a0bae <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80a0bae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a0bb0:	4606      	mov	r6, r0
 80a0bb2:	4615      	mov	r5, r2
 80a0bb4:	460c      	mov	r4, r1
 80a0bb6:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a0bb8:	42bc      	cmp	r4, r7
 80a0bba:	d006      	beq.n	80a0bca <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80a0bbc:	6833      	ldr	r3, [r6, #0]
 80a0bbe:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a0bc2:	689b      	ldr	r3, [r3, #8]
 80a0bc4:	4630      	mov	r0, r6
 80a0bc6:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a0bc8:	e7f6      	b.n	80a0bb8 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
 80a0bca:	4628      	mov	r0, r5
 80a0bcc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a0bce <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
 80a0bce:	2200      	movs	r2, #0
 80a0bd0:	7c00      	ldrb	r0, [r0, #16]
 80a0bd2:	f7ff bb87 	b.w	80a02e4 <HAL_I2C_Write_Data>

080a0bd6 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
 80a0bd6:	2100      	movs	r1, #0
 80a0bd8:	7c00      	ldrb	r0, [r0, #16]
 80a0bda:	f7ff bb8b 	b.w	80a02f4 <HAL_I2C_Available_Data>

080a0bde <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
 80a0bde:	2100      	movs	r1, #0
 80a0be0:	7c00      	ldrb	r0, [r0, #16]
 80a0be2:	f7ff bb8f 	b.w	80a0304 <HAL_I2C_Read_Data>

080a0be6 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
 80a0be6:	2100      	movs	r1, #0
 80a0be8:	7c00      	ldrb	r0, [r0, #16]
 80a0bea:	f7ff bb93 	b.w	80a0314 <HAL_I2C_Peek_Data>

080a0bee <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
 80a0bee:	2100      	movs	r1, #0
 80a0bf0:	7c00      	ldrb	r0, [r0, #16]
 80a0bf2:	f7ff bb97 	b.w	80a0324 <HAL_I2C_Flush_Data>

080a0bf6 <_ZN7TwoWireD0Ev>:
 80a0bf6:	b510      	push	{r4, lr}
 80a0bf8:	4604      	mov	r4, r0
 80a0bfa:	2114      	movs	r1, #20
 80a0bfc:	f000 f955 	bl	80a0eaa <_ZdlPvj>
 80a0c00:	4620      	mov	r0, r4
 80a0c02:	bd10      	pop	{r4, pc}

080a0c04 <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 80a0c04:	b510      	push	{r4, lr}
 80a0c06:	4604      	mov	r4, r0
 80a0c08:	4608      	mov	r0, r1
 80a0c0a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a0c0e:	60a3      	str	r3, [r4, #8]
 80a0c10:	4b04      	ldr	r3, [pc, #16]	; (80a0c24 <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
 80a0c12:	2100      	movs	r1, #0
{
  _i2c = i2c;
 80a0c14:	7420      	strb	r0, [r4, #16]
 80a0c16:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 80a0c18:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
 80a0c1a:	f7ff fb8b 	bl	80a0334 <HAL_I2C_Init>

}
 80a0c1e:	4620      	mov	r0, r4
 80a0c20:	bd10      	pop	{r4, pc}
 80a0c22:	bf00      	nop
 80a0c24:	080a1c34 	.word	0x080a1c34

080a0c28 <_ZN7TwoWire5beginEv>:
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
 80a0c28:	2300      	movs	r3, #0
 80a0c2a:	461a      	mov	r2, r3
 80a0c2c:	4619      	mov	r1, r3
 80a0c2e:	7c00      	ldrb	r0, [r0, #16]
 80a0c30:	f7ff bb38 	b.w	80a02a4 <HAL_I2C_Begin>

080a0c34 <_ZN7TwoWire11requestFromEhhh>:
{
	HAL_I2C_End(_i2c, NULL);
}

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity, uint8_t sendStop)
{
 80a0c34:	b513      	push	{r0, r1, r4, lr}
  uint8_t result = HAL_I2C_Request_Data(_i2c, address, quantity, sendStop, NULL);
 80a0c36:	2400      	movs	r4, #0
 80a0c38:	7c00      	ldrb	r0, [r0, #16]
 80a0c3a:	9400      	str	r4, [sp, #0]
 80a0c3c:	f7ff fb3a 	bl	80a02b4 <HAL_I2C_Request_Data>
  return result;
}
 80a0c40:	b2c0      	uxtb	r0, r0
 80a0c42:	b002      	add	sp, #8
 80a0c44:	bd10      	pop	{r4, pc}

080a0c46 <_ZN7TwoWire11requestFromEii>:
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
}

uint8_t TwoWire::requestFrom(int address, int quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
 80a0c46:	2301      	movs	r3, #1
 80a0c48:	b2d2      	uxtb	r2, r2
 80a0c4a:	b2c9      	uxtb	r1, r1
 80a0c4c:	f7ff bff2 	b.w	80a0c34 <_ZN7TwoWire11requestFromEhhh>

080a0c50 <_ZN7TwoWire17beginTransmissionEh>:
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)sendStop);
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
 80a0c50:	2200      	movs	r2, #0
 80a0c52:	7c00      	ldrb	r0, [r0, #16]
 80a0c54:	f7ff bb36 	b.w	80a02c4 <HAL_I2C_Begin_Transmission>

080a0c58 <_ZN7TwoWire17beginTransmissionEi>:
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
 80a0c58:	b2c9      	uxtb	r1, r1
 80a0c5a:	f7ff bff9 	b.w	80a0c50 <_ZN7TwoWire17beginTransmissionEh>

080a0c5e <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
 80a0c5e:	2200      	movs	r2, #0
 80a0c60:	7c00      	ldrb	r0, [r0, #16]
 80a0c62:	f7ff bb37 	b.w	80a02d4 <HAL_I2C_End_Transmission>

080a0c66 <_ZN7TwoWire15endTransmissionEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
 80a0c66:	2101      	movs	r1, #1
 80a0c68:	f7ff bff9 	b.w	80a0c5e <_ZN7TwoWire15endTransmissionEh>

080a0c6c <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 80a0c6c:	2200      	movs	r2, #0
 80a0c6e:	4611      	mov	r1, r2
 80a0c70:	6840      	ldr	r0, [r0, #4]
 80a0c72:	f7ff bbe5 	b.w	80a0440 <network_ready>

080a0c76 <_ZN5spark9WiFiClass7resolveEPKc>:
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a0c76:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a0c78:	4616      	mov	r6, r2
 80a0c7a:	b089      	sub	sp, #36	; 0x24
    {
        HAL_IPAddress ip = {};
 80a0c7c:	2211      	movs	r2, #17
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a0c7e:	460f      	mov	r7, r1
 80a0c80:	4604      	mov	r4, r0
    {
        HAL_IPAddress ip = {};
 80a0c82:	2100      	movs	r1, #0
 80a0c84:	a803      	add	r0, sp, #12
 80a0c86:	f000 feb4 	bl	80a19f2 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a0c8a:	4630      	mov	r0, r6
 80a0c8c:	f000 fee2 	bl	80a1a54 <strlen>
 80a0c90:	2500      	movs	r5, #0
 80a0c92:	9500      	str	r5, [sp, #0]
 80a0c94:	b281      	uxth	r1, r0
 80a0c96:	687b      	ldr	r3, [r7, #4]
 80a0c98:	aa03      	add	r2, sp, #12
 80a0c9a:	4630      	mov	r0, r6
 80a0c9c:	f7ff fb94 	bl	80a03c8 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a0ca0:	b120      	cbz	r0, 80a0cac <_ZN5spark9WiFiClass7resolveEPKc+0x36>
 80a0ca2:	4629      	mov	r1, r5
 80a0ca4:	4620      	mov	r0, r4
 80a0ca6:	f7ff fe0f 	bl	80a08c8 <_ZN9IPAddressC1Em>
 80a0caa:	e003      	b.n	80a0cb4 <_ZN5spark9WiFiClass7resolveEPKc+0x3e>
 80a0cac:	a903      	add	r1, sp, #12
 80a0cae:	4620      	mov	r0, r4
 80a0cb0:	f7ff fdf8 	bl	80a08a4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    }
 80a0cb4:	4620      	mov	r0, r4
 80a0cb6:	b009      	add	sp, #36	; 0x24
 80a0cb8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a0cba <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 80a0cba:	2200      	movs	r2, #0
 80a0cbc:	4611      	mov	r1, r2
 80a0cbe:	6840      	ldr	r0, [r0, #4]
 80a0cc0:	f7ff bbde 	b.w	80a0480 <network_listening>

080a0cc4 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
 80a0cc4:	2200      	movs	r2, #0
 80a0cc6:	4611      	mov	r1, r2
 80a0cc8:	6840      	ldr	r0, [r0, #4]
 80a0cca:	f7ff bbe9 	b.w	80a04a0 <network_get_listen_timeout>

080a0cce <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
 80a0cce:	2200      	movs	r2, #0
 80a0cd0:	6840      	ldr	r0, [r0, #4]
 80a0cd2:	f7ff bbdd 	b.w	80a0490 <network_set_listen_timeout>

080a0cd6 <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
 80a0cd6:	2200      	movs	r2, #0
 80a0cd8:	f081 0101 	eor.w	r1, r1, #1
 80a0cdc:	6840      	ldr	r0, [r0, #4]
 80a0cde:	f7ff bbc7 	b.w	80a0470 <network_listen>

080a0ce2 <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
 80a0ce2:	2300      	movs	r3, #0
 80a0ce4:	461a      	mov	r2, r3
 80a0ce6:	4619      	mov	r1, r3
 80a0ce8:	6840      	ldr	r0, [r0, #4]
 80a0cea:	f7ff bbb9 	b.w	80a0460 <network_off>

080a0cee <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
 80a0cee:	2200      	movs	r2, #0
 80a0cf0:	4611      	mov	r1, r2
 80a0cf2:	6840      	ldr	r0, [r0, #4]
 80a0cf4:	f7ff bb94 	b.w	80a0420 <network_connecting>

080a0cf8 <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 80a0cf8:	2200      	movs	r2, #0
 80a0cfa:	2102      	movs	r1, #2
 80a0cfc:	6840      	ldr	r0, [r0, #4]
 80a0cfe:	f7ff bb97 	b.w	80a0430 <network_disconnect>

080a0d02 <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
 80a0d02:	2300      	movs	r3, #0
 80a0d04:	461a      	mov	r2, r3
 80a0d06:	6840      	ldr	r0, [r0, #4]
 80a0d08:	f7ff bb82 	b.w	80a0410 <network_connect>

080a0d0c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 80a0d0c:	4b02      	ldr	r3, [pc, #8]	; (80a0d18 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 80a0d0e:	2204      	movs	r2, #4
 80a0d10:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 80a0d12:	4a02      	ldr	r2, [pc, #8]	; (80a0d1c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 80a0d14:	601a      	str	r2, [r3, #0]
 80a0d16:	4770      	bx	lr
 80a0d18:	2000050c 	.word	0x2000050c
 80a0d1c:	080a1c5c 	.word	0x080a1c5c

080a0d20 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 80a0d20:	2300      	movs	r3, #0
 80a0d22:	461a      	mov	r2, r3
 80a0d24:	6840      	ldr	r0, [r0, #4]
 80a0d26:	f7ff bb73 	b.w	80a0410 <network_connect>

080a0d2a <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 80a0d2a:	2200      	movs	r2, #0
 80a0d2c:	2102      	movs	r1, #2
 80a0d2e:	6840      	ldr	r0, [r0, #4]
 80a0d30:	f7ff bb7e 	b.w	80a0430 <network_disconnect>

080a0d34 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 80a0d34:	2200      	movs	r2, #0
 80a0d36:	4611      	mov	r1, r2
 80a0d38:	6840      	ldr	r0, [r0, #4]
 80a0d3a:	f7ff bb71 	b.w	80a0420 <network_connecting>

080a0d3e <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 80a0d3e:	2200      	movs	r2, #0
 80a0d40:	4611      	mov	r1, r2
 80a0d42:	6840      	ldr	r0, [r0, #4]
 80a0d44:	f7ff bb7c 	b.w	80a0440 <network_ready>

080a0d48 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 80a0d48:	2300      	movs	r3, #0
 80a0d4a:	461a      	mov	r2, r3
 80a0d4c:	4619      	mov	r1, r3
 80a0d4e:	6840      	ldr	r0, [r0, #4]
 80a0d50:	f7ff bb7e 	b.w	80a0450 <network_on>

080a0d54 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 80a0d54:	2300      	movs	r3, #0
 80a0d56:	461a      	mov	r2, r3
 80a0d58:	4619      	mov	r1, r3
 80a0d5a:	6840      	ldr	r0, [r0, #4]
 80a0d5c:	f7ff bb80 	b.w	80a0460 <network_off>

080a0d60 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 80a0d60:	2200      	movs	r2, #0
 80a0d62:	f081 0101 	eor.w	r1, r1, #1
 80a0d66:	6840      	ldr	r0, [r0, #4]
 80a0d68:	f7ff bb82 	b.w	80a0470 <network_listen>

080a0d6c <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 80a0d6c:	2200      	movs	r2, #0
 80a0d6e:	6840      	ldr	r0, [r0, #4]
 80a0d70:	f7ff bb8e 	b.w	80a0490 <network_set_listen_timeout>

080a0d74 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 80a0d74:	2200      	movs	r2, #0
 80a0d76:	4611      	mov	r1, r2
 80a0d78:	6840      	ldr	r0, [r0, #4]
 80a0d7a:	f7ff bb91 	b.w	80a04a0 <network_get_listen_timeout>

080a0d7e <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 80a0d7e:	2200      	movs	r2, #0
 80a0d80:	4611      	mov	r1, r2
 80a0d82:	6840      	ldr	r0, [r0, #4]
 80a0d84:	f7ff bb7c 	b.w	80a0480 <network_listening>

080a0d88 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 80a0d88:	b570      	push	{r4, r5, r6, lr}
 80a0d8a:	4616      	mov	r6, r2
 80a0d8c:	b08e      	sub	sp, #56	; 0x38
 80a0d8e:	4604      	mov	r4, r0
    IPAddress addr;
 80a0d90:	a808      	add	r0, sp, #32
 80a0d92:	f7ff fd79 	bl	80a0888 <_ZN9IPAddressC1Ev>
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {};
 80a0d96:	2211      	movs	r2, #17
 80a0d98:	2100      	movs	r1, #0
 80a0d9a:	a803      	add	r0, sp, #12
 80a0d9c:	f000 fe29 	bl	80a19f2 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a0da0:	4630      	mov	r0, r6
 80a0da2:	f000 fe57 	bl	80a1a54 <strlen>
 80a0da6:	2500      	movs	r5, #0
 80a0da8:	4b0a      	ldr	r3, [pc, #40]	; (80a0dd4 <_ZN5spark12NetworkClass7resolveEPKc+0x4c>)
 80a0daa:	9500      	str	r5, [sp, #0]
 80a0dac:	b281      	uxth	r1, r0
 80a0dae:	685b      	ldr	r3, [r3, #4]
 80a0db0:	aa03      	add	r2, sp, #12
 80a0db2:	4630      	mov	r0, r6
 80a0db4:	f7ff fb08 	bl	80a03c8 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a0db8:	b120      	cbz	r0, 80a0dc4 <_ZN5spark12NetworkClass7resolveEPKc+0x3c>
 80a0dba:	4629      	mov	r1, r5
 80a0dbc:	4620      	mov	r0, r4
 80a0dbe:	f7ff fd83 	bl	80a08c8 <_ZN9IPAddressC1Em>
 80a0dc2:	e003      	b.n	80a0dcc <_ZN5spark12NetworkClass7resolveEPKc+0x44>
 80a0dc4:	a903      	add	r1, sp, #12
 80a0dc6:	4620      	mov	r0, r4
 80a0dc8:	f7ff fd6c 	bl	80a08a4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 80a0dcc:	4620      	mov	r0, r4
 80a0dce:	b00e      	add	sp, #56	; 0x38
 80a0dd0:	bd70      	pop	{r4, r5, r6, pc}
 80a0dd2:	bf00      	nop
 80a0dd4:	2000050c 	.word	0x2000050c

080a0dd8 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
 80a0dd8:	4b02      	ldr	r3, [pc, #8]	; (80a0de4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 80a0dda:	4a03      	ldr	r2, [pc, #12]	; (80a0de8 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 80a0ddc:	601a      	str	r2, [r3, #0]
 80a0dde:	2200      	movs	r2, #0
 80a0de0:	605a      	str	r2, [r3, #4]
 80a0de2:	4770      	bx	lr
 80a0de4:	20000514 	.word	0x20000514
 80a0de8:	080a1c90 	.word	0x080a1c90

080a0dec <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a0dec:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a0dee:	4c0c      	ldr	r4, [pc, #48]	; (80a0e20 <_GLOBAL__sub_I_SPI+0x34>)
 80a0df0:	4e0c      	ldr	r6, [pc, #48]	; (80a0e24 <_GLOBAL__sub_I_SPI+0x38>)
 80a0df2:	4d0d      	ldr	r5, [pc, #52]	; (80a0e28 <_GLOBAL__sub_I_SPI+0x3c>)
 80a0df4:	2100      	movs	r1, #0
 80a0df6:	4620      	mov	r0, r4
 80a0df8:	f7ff fb7a 	bl	80a04f0 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a0dfc:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a0dfe:	4c0b      	ldr	r4, [pc, #44]	; (80a0e2c <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a0e00:	4632      	mov	r2, r6
 80a0e02:	4629      	mov	r1, r5
 80a0e04:	f000 f84c 	bl	80a0ea0 <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a0e08:	2101      	movs	r1, #1
 80a0e0a:	4620      	mov	r0, r4
 80a0e0c:	f7ff fb70 	bl	80a04f0 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a0e10:	4632      	mov	r2, r6
 80a0e12:	4629      	mov	r1, r5
 80a0e14:	4620      	mov	r0, r4
 80a0e16:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80a0e1a:	f000 b841 	b.w	80a0ea0 <__aeabi_atexit>
 80a0e1e:	bf00      	nop
 80a0e20:	2000051c 	.word	0x2000051c
 80a0e24:	2000006c 	.word	0x2000006c
 80a0e28:	080a04e1 	.word	0x080a04e1
 80a0e2c:	2000052c 	.word	0x2000052c

080a0e30 <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a0e30:	b513      	push	{r0, r1, r4, lr}
 80a0e32:	4c08      	ldr	r4, [pc, #32]	; (80a0e54 <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 80a0e34:	2300      	movs	r3, #0
 80a0e36:	461a      	mov	r2, r3
 80a0e38:	4619      	mov	r1, r3
 80a0e3a:	9300      	str	r3, [sp, #0]
 80a0e3c:	4620      	mov	r0, r4
 80a0e3e:	f7ff fd59 	bl	80a08f4 <_ZN9IPAddressC1Ehhhh>
 80a0e42:	4620      	mov	r0, r4
 80a0e44:	4a04      	ldr	r2, [pc, #16]	; (80a0e58 <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 80a0e46:	4905      	ldr	r1, [pc, #20]	; (80a0e5c <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 80a0e48:	b002      	add	sp, #8
 80a0e4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a0e4e:	f000 b827 	b.w	80a0ea0 <__aeabi_atexit>
 80a0e52:	bf00      	nop
 80a0e54:	20000540 	.word	0x20000540
 80a0e58:	2000006c 	.word	0x2000006c
 80a0e5c:	080a0845 	.word	0x080a0845

080a0e60 <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
 80a0e60:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
 80a0e62:	4d0b      	ldr	r5, [pc, #44]	; (80a0e90 <_Z19__fetch_global_Wirev+0x30>)
 80a0e64:	6829      	ldr	r1, [r5, #0]
 80a0e66:	f011 0401 	ands.w	r4, r1, #1
 80a0e6a:	d10f      	bne.n	80a0e8c <_Z19__fetch_global_Wirev+0x2c>
 80a0e6c:	4628      	mov	r0, r5
 80a0e6e:	f7ff f916 	bl	80a009e <__cxa_guard_acquire>
 80a0e72:	b158      	cbz	r0, 80a0e8c <_Z19__fetch_global_Wirev+0x2c>
 80a0e74:	4621      	mov	r1, r4
 80a0e76:	4807      	ldr	r0, [pc, #28]	; (80a0e94 <_Z19__fetch_global_Wirev+0x34>)
 80a0e78:	f7ff fec4 	bl	80a0c04 <_ZN7TwoWireC1E17HAL_I2C_Interface>
 80a0e7c:	4628      	mov	r0, r5
 80a0e7e:	f7ff f913 	bl	80a00a8 <__cxa_guard_release>
 80a0e82:	4a05      	ldr	r2, [pc, #20]	; (80a0e98 <_Z19__fetch_global_Wirev+0x38>)
 80a0e84:	4905      	ldr	r1, [pc, #20]	; (80a0e9c <_Z19__fetch_global_Wirev+0x3c>)
 80a0e86:	4803      	ldr	r0, [pc, #12]	; (80a0e94 <_Z19__fetch_global_Wirev+0x34>)
 80a0e88:	f000 f80a 	bl	80a0ea0 <__aeabi_atexit>
	return wire;
}
 80a0e8c:	4801      	ldr	r0, [pc, #4]	; (80a0e94 <_Z19__fetch_global_Wirev+0x34>)
 80a0e8e:	bd38      	pop	{r3, r4, r5, pc}
 80a0e90:	20000558 	.word	0x20000558
 80a0e94:	2000055c 	.word	0x2000055c
 80a0e98:	2000006c 	.word	0x2000006c
 80a0e9c:	080a0bad 	.word	0x080a0bad

080a0ea0 <__aeabi_atexit>:
 80a0ea0:	460b      	mov	r3, r1
 80a0ea2:	4601      	mov	r1, r0
 80a0ea4:	4618      	mov	r0, r3
 80a0ea6:	f000 bd8b 	b.w	80a19c0 <__cxa_atexit>

080a0eaa <_ZdlPvj>:
 80a0eaa:	f7ff b8f6 	b.w	80a009a <_ZdlPv>
	...

080a0eb0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a0eb0:	4b18      	ldr	r3, [pc, #96]	; (80a0f14 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a0eb2:	681a      	ldr	r2, [r3, #0]
 80a0eb4:	07d1      	lsls	r1, r2, #31
 80a0eb6:	bf5c      	itt	pl
 80a0eb8:	2201      	movpl	r2, #1
 80a0eba:	601a      	strpl	r2, [r3, #0]
 80a0ebc:	4b16      	ldr	r3, [pc, #88]	; (80a0f18 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a0ebe:	681a      	ldr	r2, [r3, #0]
 80a0ec0:	07d2      	lsls	r2, r2, #31
 80a0ec2:	bf5c      	itt	pl
 80a0ec4:	2201      	movpl	r2, #1
 80a0ec6:	601a      	strpl	r2, [r3, #0]
 80a0ec8:	4b14      	ldr	r3, [pc, #80]	; (80a0f1c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a0eca:	681a      	ldr	r2, [r3, #0]
 80a0ecc:	07d0      	lsls	r0, r2, #31
 80a0ece:	bf5c      	itt	pl
 80a0ed0:	2201      	movpl	r2, #1
 80a0ed2:	601a      	strpl	r2, [r3, #0]
 80a0ed4:	4b12      	ldr	r3, [pc, #72]	; (80a0f20 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a0ed6:	681a      	ldr	r2, [r3, #0]
 80a0ed8:	07d1      	lsls	r1, r2, #31
 80a0eda:	bf5c      	itt	pl
 80a0edc:	2201      	movpl	r2, #1
 80a0ede:	601a      	strpl	r2, [r3, #0]
 80a0ee0:	4b10      	ldr	r3, [pc, #64]	; (80a0f24 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a0ee2:	681a      	ldr	r2, [r3, #0]
 80a0ee4:	07d2      	lsls	r2, r2, #31
 80a0ee6:	bf5c      	itt	pl
 80a0ee8:	2201      	movpl	r2, #1
 80a0eea:	601a      	strpl	r2, [r3, #0]
 80a0eec:	4b0e      	ldr	r3, [pc, #56]	; (80a0f28 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a0eee:	681a      	ldr	r2, [r3, #0]
 80a0ef0:	07d0      	lsls	r0, r2, #31
 80a0ef2:	bf5c      	itt	pl
 80a0ef4:	2201      	movpl	r2, #1
 80a0ef6:	601a      	strpl	r2, [r3, #0]
 80a0ef8:	4b0c      	ldr	r3, [pc, #48]	; (80a0f2c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a0efa:	681a      	ldr	r2, [r3, #0]
 80a0efc:	07d1      	lsls	r1, r2, #31
 80a0efe:	bf5c      	itt	pl
 80a0f00:	2201      	movpl	r2, #1
 80a0f02:	601a      	strpl	r2, [r3, #0]
 80a0f04:	4b0a      	ldr	r3, [pc, #40]	; (80a0f30 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a0f06:	681a      	ldr	r2, [r3, #0]
 80a0f08:	07d2      	lsls	r2, r2, #31
 80a0f0a:	bf5c      	itt	pl
 80a0f0c:	2201      	movpl	r2, #1
 80a0f0e:	601a      	strpl	r2, [r3, #0]
 80a0f10:	4770      	bx	lr
 80a0f12:	bf00      	nop
 80a0f14:	2000058c 	.word	0x2000058c
 80a0f18:	20000588 	.word	0x20000588
 80a0f1c:	20000584 	.word	0x20000584
 80a0f20:	20000580 	.word	0x20000580
 80a0f24:	2000057c 	.word	0x2000057c
 80a0f28:	20000578 	.word	0x20000578
 80a0f2c:	20000574 	.word	0x20000574
 80a0f30:	20000570 	.word	0x20000570

080a0f34 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
 80a0f34:	4b24      	ldr	r3, [pc, #144]	; (80a0fc8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
 80a0f36:	681a      	ldr	r2, [r3, #0]
 80a0f38:	07d0      	lsls	r0, r2, #31
 80a0f3a:	bf5c      	itt	pl
 80a0f3c:	2201      	movpl	r2, #1
 80a0f3e:	601a      	strpl	r2, [r3, #0]
 80a0f40:	4b22      	ldr	r3, [pc, #136]	; (80a0fcc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
 80a0f42:	681a      	ldr	r2, [r3, #0]
 80a0f44:	07d1      	lsls	r1, r2, #31
 80a0f46:	bf5c      	itt	pl
 80a0f48:	2201      	movpl	r2, #1
 80a0f4a:	601a      	strpl	r2, [r3, #0]
 80a0f4c:	4b20      	ldr	r3, [pc, #128]	; (80a0fd0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
 80a0f4e:	681a      	ldr	r2, [r3, #0]
 80a0f50:	07d2      	lsls	r2, r2, #31
 80a0f52:	bf5c      	itt	pl
 80a0f54:	2201      	movpl	r2, #1
 80a0f56:	601a      	strpl	r2, [r3, #0]
 80a0f58:	4b1e      	ldr	r3, [pc, #120]	; (80a0fd4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
 80a0f5a:	681a      	ldr	r2, [r3, #0]
 80a0f5c:	07d0      	lsls	r0, r2, #31
 80a0f5e:	bf5c      	itt	pl
 80a0f60:	2201      	movpl	r2, #1
 80a0f62:	601a      	strpl	r2, [r3, #0]
 80a0f64:	4b1c      	ldr	r3, [pc, #112]	; (80a0fd8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
 80a0f66:	681a      	ldr	r2, [r3, #0]
 80a0f68:	07d1      	lsls	r1, r2, #31
 80a0f6a:	bf5c      	itt	pl
 80a0f6c:	2201      	movpl	r2, #1
 80a0f6e:	601a      	strpl	r2, [r3, #0]
 80a0f70:	4b1a      	ldr	r3, [pc, #104]	; (80a0fdc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
 80a0f72:	681a      	ldr	r2, [r3, #0]
 80a0f74:	07d2      	lsls	r2, r2, #31
 80a0f76:	bf5c      	itt	pl
 80a0f78:	2201      	movpl	r2, #1
 80a0f7a:	601a      	strpl	r2, [r3, #0]
 80a0f7c:	4b18      	ldr	r3, [pc, #96]	; (80a0fe0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
 80a0f7e:	681a      	ldr	r2, [r3, #0]
 80a0f80:	07d0      	lsls	r0, r2, #31
 80a0f82:	bf5c      	itt	pl
 80a0f84:	2201      	movpl	r2, #1
 80a0f86:	601a      	strpl	r2, [r3, #0]
 80a0f88:	4b16      	ldr	r3, [pc, #88]	; (80a0fe4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
 80a0f8a:	681a      	ldr	r2, [r3, #0]
 80a0f8c:	07d1      	lsls	r1, r2, #31
 80a0f8e:	bf5c      	itt	pl
 80a0f90:	2201      	movpl	r2, #1
 80a0f92:	601a      	strpl	r2, [r3, #0]
 80a0f94:	4b14      	ldr	r3, [pc, #80]	; (80a0fe8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
 80a0f96:	681a      	ldr	r2, [r3, #0]
 80a0f98:	07d2      	lsls	r2, r2, #31
 80a0f9a:	bf5c      	itt	pl
 80a0f9c:	2201      	movpl	r2, #1
 80a0f9e:	601a      	strpl	r2, [r3, #0]
 80a0fa0:	4b12      	ldr	r3, [pc, #72]	; (80a0fec <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
 80a0fa2:	681a      	ldr	r2, [r3, #0]
 80a0fa4:	07d0      	lsls	r0, r2, #31
 80a0fa6:	bf5c      	itt	pl
 80a0fa8:	2201      	movpl	r2, #1
 80a0faa:	601a      	strpl	r2, [r3, #0]
 80a0fac:	4b10      	ldr	r3, [pc, #64]	; (80a0ff0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
 80a0fae:	681a      	ldr	r2, [r3, #0]
 80a0fb0:	07d1      	lsls	r1, r2, #31
 80a0fb2:	bf5c      	itt	pl
 80a0fb4:	2201      	movpl	r2, #1
 80a0fb6:	601a      	strpl	r2, [r3, #0]
 80a0fb8:	4b0e      	ldr	r3, [pc, #56]	; (80a0ff4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
 80a0fba:	681a      	ldr	r2, [r3, #0]
 80a0fbc:	07d2      	lsls	r2, r2, #31
 80a0fbe:	bf5c      	itt	pl
 80a0fc0:	2201      	movpl	r2, #1
 80a0fc2:	601a      	strpl	r2, [r3, #0]
 80a0fc4:	4770      	bx	lr
 80a0fc6:	bf00      	nop
 80a0fc8:	200005bc 	.word	0x200005bc
 80a0fcc:	200005b8 	.word	0x200005b8
 80a0fd0:	200005b4 	.word	0x200005b4
 80a0fd4:	200005b0 	.word	0x200005b0
 80a0fd8:	200005ac 	.word	0x200005ac
 80a0fdc:	200005a8 	.word	0x200005a8
 80a0fe0:	200005a4 	.word	0x200005a4
 80a0fe4:	200005a0 	.word	0x200005a0
 80a0fe8:	2000059c 	.word	0x2000059c
 80a0fec:	20000598 	.word	0x20000598
 80a0ff0:	20000594 	.word	0x20000594
 80a0ff4:	20000590 	.word	0x20000590

080a0ff8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
 80a0ff8:	4b24      	ldr	r3, [pc, #144]	; (80a108c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
 80a0ffa:	681a      	ldr	r2, [r3, #0]
 80a0ffc:	07d0      	lsls	r0, r2, #31
 80a0ffe:	bf5c      	itt	pl
 80a1000:	2201      	movpl	r2, #1
 80a1002:	601a      	strpl	r2, [r3, #0]
 80a1004:	4b22      	ldr	r3, [pc, #136]	; (80a1090 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
 80a1006:	681a      	ldr	r2, [r3, #0]
 80a1008:	07d1      	lsls	r1, r2, #31
 80a100a:	bf5c      	itt	pl
 80a100c:	2201      	movpl	r2, #1
 80a100e:	601a      	strpl	r2, [r3, #0]
 80a1010:	4b20      	ldr	r3, [pc, #128]	; (80a1094 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
 80a1012:	681a      	ldr	r2, [r3, #0]
 80a1014:	07d2      	lsls	r2, r2, #31
 80a1016:	bf5c      	itt	pl
 80a1018:	2201      	movpl	r2, #1
 80a101a:	601a      	strpl	r2, [r3, #0]
 80a101c:	4b1e      	ldr	r3, [pc, #120]	; (80a1098 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
 80a101e:	681a      	ldr	r2, [r3, #0]
 80a1020:	07d0      	lsls	r0, r2, #31
 80a1022:	bf5c      	itt	pl
 80a1024:	2201      	movpl	r2, #1
 80a1026:	601a      	strpl	r2, [r3, #0]
 80a1028:	4b1c      	ldr	r3, [pc, #112]	; (80a109c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
 80a102a:	681a      	ldr	r2, [r3, #0]
 80a102c:	07d1      	lsls	r1, r2, #31
 80a102e:	bf5c      	itt	pl
 80a1030:	2201      	movpl	r2, #1
 80a1032:	601a      	strpl	r2, [r3, #0]
 80a1034:	4b1a      	ldr	r3, [pc, #104]	; (80a10a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
 80a1036:	681a      	ldr	r2, [r3, #0]
 80a1038:	07d2      	lsls	r2, r2, #31
 80a103a:	bf5c      	itt	pl
 80a103c:	2201      	movpl	r2, #1
 80a103e:	601a      	strpl	r2, [r3, #0]
 80a1040:	4b18      	ldr	r3, [pc, #96]	; (80a10a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
 80a1042:	681a      	ldr	r2, [r3, #0]
 80a1044:	07d0      	lsls	r0, r2, #31
 80a1046:	bf5c      	itt	pl
 80a1048:	2201      	movpl	r2, #1
 80a104a:	601a      	strpl	r2, [r3, #0]
 80a104c:	4b16      	ldr	r3, [pc, #88]	; (80a10a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
 80a104e:	681a      	ldr	r2, [r3, #0]
 80a1050:	07d1      	lsls	r1, r2, #31
 80a1052:	bf5c      	itt	pl
 80a1054:	2201      	movpl	r2, #1
 80a1056:	601a      	strpl	r2, [r3, #0]
 80a1058:	4b14      	ldr	r3, [pc, #80]	; (80a10ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
 80a105a:	681a      	ldr	r2, [r3, #0]
 80a105c:	07d2      	lsls	r2, r2, #31
 80a105e:	bf5c      	itt	pl
 80a1060:	2201      	movpl	r2, #1
 80a1062:	601a      	strpl	r2, [r3, #0]
 80a1064:	4b12      	ldr	r3, [pc, #72]	; (80a10b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
 80a1066:	681a      	ldr	r2, [r3, #0]
 80a1068:	07d0      	lsls	r0, r2, #31
 80a106a:	bf5c      	itt	pl
 80a106c:	2201      	movpl	r2, #1
 80a106e:	601a      	strpl	r2, [r3, #0]
 80a1070:	4b10      	ldr	r3, [pc, #64]	; (80a10b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
 80a1072:	681a      	ldr	r2, [r3, #0]
 80a1074:	07d1      	lsls	r1, r2, #31
 80a1076:	bf5c      	itt	pl
 80a1078:	2201      	movpl	r2, #1
 80a107a:	601a      	strpl	r2, [r3, #0]
 80a107c:	4b0e      	ldr	r3, [pc, #56]	; (80a10b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
 80a107e:	681a      	ldr	r2, [r3, #0]
 80a1080:	07d2      	lsls	r2, r2, #31
 80a1082:	bf5c      	itt	pl
 80a1084:	2201      	movpl	r2, #1
 80a1086:	601a      	strpl	r2, [r3, #0]
 80a1088:	4770      	bx	lr
 80a108a:	bf00      	nop
 80a108c:	200005ec 	.word	0x200005ec
 80a1090:	200005e8 	.word	0x200005e8
 80a1094:	200005e4 	.word	0x200005e4
 80a1098:	200005e0 	.word	0x200005e0
 80a109c:	200005dc 	.word	0x200005dc
 80a10a0:	200005d8 	.word	0x200005d8
 80a10a4:	200005d4 	.word	0x200005d4
 80a10a8:	200005d0 	.word	0x200005d0
 80a10ac:	200005cc 	.word	0x200005cc
 80a10b0:	200005c8 	.word	0x200005c8
 80a10b4:	200005c4 	.word	0x200005c4
 80a10b8:	200005c0 	.word	0x200005c0

080a10bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a10bc:	4b18      	ldr	r3, [pc, #96]	; (80a1120 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a10be:	681a      	ldr	r2, [r3, #0]
 80a10c0:	07d1      	lsls	r1, r2, #31
 80a10c2:	bf5c      	itt	pl
 80a10c4:	2201      	movpl	r2, #1
 80a10c6:	601a      	strpl	r2, [r3, #0]
 80a10c8:	4b16      	ldr	r3, [pc, #88]	; (80a1124 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a10ca:	681a      	ldr	r2, [r3, #0]
 80a10cc:	07d2      	lsls	r2, r2, #31
 80a10ce:	bf5c      	itt	pl
 80a10d0:	2201      	movpl	r2, #1
 80a10d2:	601a      	strpl	r2, [r3, #0]
 80a10d4:	4b14      	ldr	r3, [pc, #80]	; (80a1128 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a10d6:	681a      	ldr	r2, [r3, #0]
 80a10d8:	07d0      	lsls	r0, r2, #31
 80a10da:	bf5c      	itt	pl
 80a10dc:	2201      	movpl	r2, #1
 80a10de:	601a      	strpl	r2, [r3, #0]
 80a10e0:	4b12      	ldr	r3, [pc, #72]	; (80a112c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a10e2:	681a      	ldr	r2, [r3, #0]
 80a10e4:	07d1      	lsls	r1, r2, #31
 80a10e6:	bf5c      	itt	pl
 80a10e8:	2201      	movpl	r2, #1
 80a10ea:	601a      	strpl	r2, [r3, #0]
 80a10ec:	4b10      	ldr	r3, [pc, #64]	; (80a1130 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a10ee:	681a      	ldr	r2, [r3, #0]
 80a10f0:	07d2      	lsls	r2, r2, #31
 80a10f2:	bf5c      	itt	pl
 80a10f4:	2201      	movpl	r2, #1
 80a10f6:	601a      	strpl	r2, [r3, #0]
 80a10f8:	4b0e      	ldr	r3, [pc, #56]	; (80a1134 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a10fa:	681a      	ldr	r2, [r3, #0]
 80a10fc:	07d0      	lsls	r0, r2, #31
 80a10fe:	bf5c      	itt	pl
 80a1100:	2201      	movpl	r2, #1
 80a1102:	601a      	strpl	r2, [r3, #0]
 80a1104:	4b0c      	ldr	r3, [pc, #48]	; (80a1138 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a1106:	681a      	ldr	r2, [r3, #0]
 80a1108:	07d1      	lsls	r1, r2, #31
 80a110a:	bf5c      	itt	pl
 80a110c:	2201      	movpl	r2, #1
 80a110e:	601a      	strpl	r2, [r3, #0]
 80a1110:	4b0a      	ldr	r3, [pc, #40]	; (80a113c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a1112:	681a      	ldr	r2, [r3, #0]
 80a1114:	07d2      	lsls	r2, r2, #31
 80a1116:	bf5c      	itt	pl
 80a1118:	2201      	movpl	r2, #1
 80a111a:	601a      	strpl	r2, [r3, #0]
 80a111c:	4770      	bx	lr
 80a111e:	bf00      	nop
 80a1120:	2000060c 	.word	0x2000060c
 80a1124:	20000608 	.word	0x20000608
 80a1128:	20000604 	.word	0x20000604
 80a112c:	20000600 	.word	0x20000600
 80a1130:	200005fc 	.word	0x200005fc
 80a1134:	200005f8 	.word	0x200005f8
 80a1138:	200005f4 	.word	0x200005f4
 80a113c:	200005f0 	.word	0x200005f0

080a1140 <__aeabi_drsub>:
 80a1140:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80a1144:	e002      	b.n	80a114c <__adddf3>
 80a1146:	bf00      	nop

080a1148 <__aeabi_dsub>:
 80a1148:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080a114c <__adddf3>:
 80a114c:	b530      	push	{r4, r5, lr}
 80a114e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80a1152:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80a1156:	ea94 0f05 	teq	r4, r5
 80a115a:	bf08      	it	eq
 80a115c:	ea90 0f02 	teqeq	r0, r2
 80a1160:	bf1f      	itttt	ne
 80a1162:	ea54 0c00 	orrsne.w	ip, r4, r0
 80a1166:	ea55 0c02 	orrsne.w	ip, r5, r2
 80a116a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80a116e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a1172:	f000 80e2 	beq.w	80a133a <__adddf3+0x1ee>
 80a1176:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80a117a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80a117e:	bfb8      	it	lt
 80a1180:	426d      	neglt	r5, r5
 80a1182:	dd0c      	ble.n	80a119e <__adddf3+0x52>
 80a1184:	442c      	add	r4, r5
 80a1186:	ea80 0202 	eor.w	r2, r0, r2
 80a118a:	ea81 0303 	eor.w	r3, r1, r3
 80a118e:	ea82 0000 	eor.w	r0, r2, r0
 80a1192:	ea83 0101 	eor.w	r1, r3, r1
 80a1196:	ea80 0202 	eor.w	r2, r0, r2
 80a119a:	ea81 0303 	eor.w	r3, r1, r3
 80a119e:	2d36      	cmp	r5, #54	; 0x36
 80a11a0:	bf88      	it	hi
 80a11a2:	bd30      	pophi	{r4, r5, pc}
 80a11a4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a11a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a11ac:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80a11b0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80a11b4:	d002      	beq.n	80a11bc <__adddf3+0x70>
 80a11b6:	4240      	negs	r0, r0
 80a11b8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a11bc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80a11c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a11c4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80a11c8:	d002      	beq.n	80a11d0 <__adddf3+0x84>
 80a11ca:	4252      	negs	r2, r2
 80a11cc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80a11d0:	ea94 0f05 	teq	r4, r5
 80a11d4:	f000 80a7 	beq.w	80a1326 <__adddf3+0x1da>
 80a11d8:	f1a4 0401 	sub.w	r4, r4, #1
 80a11dc:	f1d5 0e20 	rsbs	lr, r5, #32
 80a11e0:	db0d      	blt.n	80a11fe <__adddf3+0xb2>
 80a11e2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80a11e6:	fa22 f205 	lsr.w	r2, r2, r5
 80a11ea:	1880      	adds	r0, r0, r2
 80a11ec:	f141 0100 	adc.w	r1, r1, #0
 80a11f0:	fa03 f20e 	lsl.w	r2, r3, lr
 80a11f4:	1880      	adds	r0, r0, r2
 80a11f6:	fa43 f305 	asr.w	r3, r3, r5
 80a11fa:	4159      	adcs	r1, r3
 80a11fc:	e00e      	b.n	80a121c <__adddf3+0xd0>
 80a11fe:	f1a5 0520 	sub.w	r5, r5, #32
 80a1202:	f10e 0e20 	add.w	lr, lr, #32
 80a1206:	2a01      	cmp	r2, #1
 80a1208:	fa03 fc0e 	lsl.w	ip, r3, lr
 80a120c:	bf28      	it	cs
 80a120e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80a1212:	fa43 f305 	asr.w	r3, r3, r5
 80a1216:	18c0      	adds	r0, r0, r3
 80a1218:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80a121c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a1220:	d507      	bpl.n	80a1232 <__adddf3+0xe6>
 80a1222:	f04f 0e00 	mov.w	lr, #0
 80a1226:	f1dc 0c00 	rsbs	ip, ip, #0
 80a122a:	eb7e 0000 	sbcs.w	r0, lr, r0
 80a122e:	eb6e 0101 	sbc.w	r1, lr, r1
 80a1232:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80a1236:	d31b      	bcc.n	80a1270 <__adddf3+0x124>
 80a1238:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80a123c:	d30c      	bcc.n	80a1258 <__adddf3+0x10c>
 80a123e:	0849      	lsrs	r1, r1, #1
 80a1240:	ea5f 0030 	movs.w	r0, r0, rrx
 80a1244:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80a1248:	f104 0401 	add.w	r4, r4, #1
 80a124c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80a1250:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80a1254:	f080 809a 	bcs.w	80a138c <__adddf3+0x240>
 80a1258:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a125c:	bf08      	it	eq
 80a125e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a1262:	f150 0000 	adcs.w	r0, r0, #0
 80a1266:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a126a:	ea41 0105 	orr.w	r1, r1, r5
 80a126e:	bd30      	pop	{r4, r5, pc}
 80a1270:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80a1274:	4140      	adcs	r0, r0
 80a1276:	eb41 0101 	adc.w	r1, r1, r1
 80a127a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a127e:	f1a4 0401 	sub.w	r4, r4, #1
 80a1282:	d1e9      	bne.n	80a1258 <__adddf3+0x10c>
 80a1284:	f091 0f00 	teq	r1, #0
 80a1288:	bf04      	itt	eq
 80a128a:	4601      	moveq	r1, r0
 80a128c:	2000      	moveq	r0, #0
 80a128e:	fab1 f381 	clz	r3, r1
 80a1292:	bf08      	it	eq
 80a1294:	3320      	addeq	r3, #32
 80a1296:	f1a3 030b 	sub.w	r3, r3, #11
 80a129a:	f1b3 0220 	subs.w	r2, r3, #32
 80a129e:	da0c      	bge.n	80a12ba <__adddf3+0x16e>
 80a12a0:	320c      	adds	r2, #12
 80a12a2:	dd08      	ble.n	80a12b6 <__adddf3+0x16a>
 80a12a4:	f102 0c14 	add.w	ip, r2, #20
 80a12a8:	f1c2 020c 	rsb	r2, r2, #12
 80a12ac:	fa01 f00c 	lsl.w	r0, r1, ip
 80a12b0:	fa21 f102 	lsr.w	r1, r1, r2
 80a12b4:	e00c      	b.n	80a12d0 <__adddf3+0x184>
 80a12b6:	f102 0214 	add.w	r2, r2, #20
 80a12ba:	bfd8      	it	le
 80a12bc:	f1c2 0c20 	rsble	ip, r2, #32
 80a12c0:	fa01 f102 	lsl.w	r1, r1, r2
 80a12c4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80a12c8:	bfdc      	itt	le
 80a12ca:	ea41 010c 	orrle.w	r1, r1, ip
 80a12ce:	4090      	lslle	r0, r2
 80a12d0:	1ae4      	subs	r4, r4, r3
 80a12d2:	bfa2      	ittt	ge
 80a12d4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80a12d8:	4329      	orrge	r1, r5
 80a12da:	bd30      	popge	{r4, r5, pc}
 80a12dc:	ea6f 0404 	mvn.w	r4, r4
 80a12e0:	3c1f      	subs	r4, #31
 80a12e2:	da1c      	bge.n	80a131e <__adddf3+0x1d2>
 80a12e4:	340c      	adds	r4, #12
 80a12e6:	dc0e      	bgt.n	80a1306 <__adddf3+0x1ba>
 80a12e8:	f104 0414 	add.w	r4, r4, #20
 80a12ec:	f1c4 0220 	rsb	r2, r4, #32
 80a12f0:	fa20 f004 	lsr.w	r0, r0, r4
 80a12f4:	fa01 f302 	lsl.w	r3, r1, r2
 80a12f8:	ea40 0003 	orr.w	r0, r0, r3
 80a12fc:	fa21 f304 	lsr.w	r3, r1, r4
 80a1300:	ea45 0103 	orr.w	r1, r5, r3
 80a1304:	bd30      	pop	{r4, r5, pc}
 80a1306:	f1c4 040c 	rsb	r4, r4, #12
 80a130a:	f1c4 0220 	rsb	r2, r4, #32
 80a130e:	fa20 f002 	lsr.w	r0, r0, r2
 80a1312:	fa01 f304 	lsl.w	r3, r1, r4
 80a1316:	ea40 0003 	orr.w	r0, r0, r3
 80a131a:	4629      	mov	r1, r5
 80a131c:	bd30      	pop	{r4, r5, pc}
 80a131e:	fa21 f004 	lsr.w	r0, r1, r4
 80a1322:	4629      	mov	r1, r5
 80a1324:	bd30      	pop	{r4, r5, pc}
 80a1326:	f094 0f00 	teq	r4, #0
 80a132a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80a132e:	bf06      	itte	eq
 80a1330:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80a1334:	3401      	addeq	r4, #1
 80a1336:	3d01      	subne	r5, #1
 80a1338:	e74e      	b.n	80a11d8 <__adddf3+0x8c>
 80a133a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a133e:	bf18      	it	ne
 80a1340:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a1344:	d029      	beq.n	80a139a <__adddf3+0x24e>
 80a1346:	ea94 0f05 	teq	r4, r5
 80a134a:	bf08      	it	eq
 80a134c:	ea90 0f02 	teqeq	r0, r2
 80a1350:	d005      	beq.n	80a135e <__adddf3+0x212>
 80a1352:	ea54 0c00 	orrs.w	ip, r4, r0
 80a1356:	bf04      	itt	eq
 80a1358:	4619      	moveq	r1, r3
 80a135a:	4610      	moveq	r0, r2
 80a135c:	bd30      	pop	{r4, r5, pc}
 80a135e:	ea91 0f03 	teq	r1, r3
 80a1362:	bf1e      	ittt	ne
 80a1364:	2100      	movne	r1, #0
 80a1366:	2000      	movne	r0, #0
 80a1368:	bd30      	popne	{r4, r5, pc}
 80a136a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80a136e:	d105      	bne.n	80a137c <__adddf3+0x230>
 80a1370:	0040      	lsls	r0, r0, #1
 80a1372:	4149      	adcs	r1, r1
 80a1374:	bf28      	it	cs
 80a1376:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80a137a:	bd30      	pop	{r4, r5, pc}
 80a137c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80a1380:	bf3c      	itt	cc
 80a1382:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80a1386:	bd30      	popcc	{r4, r5, pc}
 80a1388:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a138c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80a1390:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a1394:	f04f 0000 	mov.w	r0, #0
 80a1398:	bd30      	pop	{r4, r5, pc}
 80a139a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a139e:	bf1a      	itte	ne
 80a13a0:	4619      	movne	r1, r3
 80a13a2:	4610      	movne	r0, r2
 80a13a4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80a13a8:	bf1c      	itt	ne
 80a13aa:	460b      	movne	r3, r1
 80a13ac:	4602      	movne	r2, r0
 80a13ae:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a13b2:	bf06      	itte	eq
 80a13b4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80a13b8:	ea91 0f03 	teqeq	r1, r3
 80a13bc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80a13c0:	bd30      	pop	{r4, r5, pc}
 80a13c2:	bf00      	nop

080a13c4 <__aeabi_ui2d>:
 80a13c4:	f090 0f00 	teq	r0, #0
 80a13c8:	bf04      	itt	eq
 80a13ca:	2100      	moveq	r1, #0
 80a13cc:	4770      	bxeq	lr
 80a13ce:	b530      	push	{r4, r5, lr}
 80a13d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a13d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a13d8:	f04f 0500 	mov.w	r5, #0
 80a13dc:	f04f 0100 	mov.w	r1, #0
 80a13e0:	e750      	b.n	80a1284 <__adddf3+0x138>
 80a13e2:	bf00      	nop

080a13e4 <__aeabi_i2d>:
 80a13e4:	f090 0f00 	teq	r0, #0
 80a13e8:	bf04      	itt	eq
 80a13ea:	2100      	moveq	r1, #0
 80a13ec:	4770      	bxeq	lr
 80a13ee:	b530      	push	{r4, r5, lr}
 80a13f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a13f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a13f8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80a13fc:	bf48      	it	mi
 80a13fe:	4240      	negmi	r0, r0
 80a1400:	f04f 0100 	mov.w	r1, #0
 80a1404:	e73e      	b.n	80a1284 <__adddf3+0x138>
 80a1406:	bf00      	nop

080a1408 <__aeabi_f2d>:
 80a1408:	0042      	lsls	r2, r0, #1
 80a140a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80a140e:	ea4f 0131 	mov.w	r1, r1, rrx
 80a1412:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80a1416:	bf1f      	itttt	ne
 80a1418:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80a141c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80a1420:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80a1424:	4770      	bxne	lr
 80a1426:	f092 0f00 	teq	r2, #0
 80a142a:	bf14      	ite	ne
 80a142c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80a1430:	4770      	bxeq	lr
 80a1432:	b530      	push	{r4, r5, lr}
 80a1434:	f44f 7460 	mov.w	r4, #896	; 0x380
 80a1438:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a143c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a1440:	e720      	b.n	80a1284 <__adddf3+0x138>
 80a1442:	bf00      	nop

080a1444 <__aeabi_ul2d>:
 80a1444:	ea50 0201 	orrs.w	r2, r0, r1
 80a1448:	bf08      	it	eq
 80a144a:	4770      	bxeq	lr
 80a144c:	b530      	push	{r4, r5, lr}
 80a144e:	f04f 0500 	mov.w	r5, #0
 80a1452:	e00a      	b.n	80a146a <__aeabi_l2d+0x16>

080a1454 <__aeabi_l2d>:
 80a1454:	ea50 0201 	orrs.w	r2, r0, r1
 80a1458:	bf08      	it	eq
 80a145a:	4770      	bxeq	lr
 80a145c:	b530      	push	{r4, r5, lr}
 80a145e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80a1462:	d502      	bpl.n	80a146a <__aeabi_l2d+0x16>
 80a1464:	4240      	negs	r0, r0
 80a1466:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a146a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a146e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a1472:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80a1476:	f43f aedc 	beq.w	80a1232 <__adddf3+0xe6>
 80a147a:	f04f 0203 	mov.w	r2, #3
 80a147e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a1482:	bf18      	it	ne
 80a1484:	3203      	addne	r2, #3
 80a1486:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a148a:	bf18      	it	ne
 80a148c:	3203      	addne	r2, #3
 80a148e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80a1492:	f1c2 0320 	rsb	r3, r2, #32
 80a1496:	fa00 fc03 	lsl.w	ip, r0, r3
 80a149a:	fa20 f002 	lsr.w	r0, r0, r2
 80a149e:	fa01 fe03 	lsl.w	lr, r1, r3
 80a14a2:	ea40 000e 	orr.w	r0, r0, lr
 80a14a6:	fa21 f102 	lsr.w	r1, r1, r2
 80a14aa:	4414      	add	r4, r2
 80a14ac:	e6c1      	b.n	80a1232 <__adddf3+0xe6>
 80a14ae:	bf00      	nop

080a14b0 <__aeabi_dmul>:
 80a14b0:	b570      	push	{r4, r5, r6, lr}
 80a14b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a14b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a14ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a14be:	bf1d      	ittte	ne
 80a14c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a14c4:	ea94 0f0c 	teqne	r4, ip
 80a14c8:	ea95 0f0c 	teqne	r5, ip
 80a14cc:	f000 f8de 	bleq	80a168c <__aeabi_dmul+0x1dc>
 80a14d0:	442c      	add	r4, r5
 80a14d2:	ea81 0603 	eor.w	r6, r1, r3
 80a14d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80a14da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80a14de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80a14e2:	bf18      	it	ne
 80a14e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80a14e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a14ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80a14f0:	d038      	beq.n	80a1564 <__aeabi_dmul+0xb4>
 80a14f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80a14f6:	f04f 0500 	mov.w	r5, #0
 80a14fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80a14fe:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80a1502:	fbe0 e503 	umlal	lr, r5, r0, r3
 80a1506:	f04f 0600 	mov.w	r6, #0
 80a150a:	fbe1 5603 	umlal	r5, r6, r1, r3
 80a150e:	f09c 0f00 	teq	ip, #0
 80a1512:	bf18      	it	ne
 80a1514:	f04e 0e01 	orrne.w	lr, lr, #1
 80a1518:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80a151c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80a1520:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80a1524:	d204      	bcs.n	80a1530 <__aeabi_dmul+0x80>
 80a1526:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80a152a:	416d      	adcs	r5, r5
 80a152c:	eb46 0606 	adc.w	r6, r6, r6
 80a1530:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80a1534:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80a1538:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80a153c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80a1540:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80a1544:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a1548:	bf88      	it	hi
 80a154a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a154e:	d81e      	bhi.n	80a158e <__aeabi_dmul+0xde>
 80a1550:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80a1554:	bf08      	it	eq
 80a1556:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80a155a:	f150 0000 	adcs.w	r0, r0, #0
 80a155e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a1562:	bd70      	pop	{r4, r5, r6, pc}
 80a1564:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80a1568:	ea46 0101 	orr.w	r1, r6, r1
 80a156c:	ea40 0002 	orr.w	r0, r0, r2
 80a1570:	ea81 0103 	eor.w	r1, r1, r3
 80a1574:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80a1578:	bfc2      	ittt	gt
 80a157a:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a157e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a1582:	bd70      	popgt	{r4, r5, r6, pc}
 80a1584:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a1588:	f04f 0e00 	mov.w	lr, #0
 80a158c:	3c01      	subs	r4, #1
 80a158e:	f300 80ab 	bgt.w	80a16e8 <__aeabi_dmul+0x238>
 80a1592:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80a1596:	bfde      	ittt	le
 80a1598:	2000      	movle	r0, #0
 80a159a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80a159e:	bd70      	pople	{r4, r5, r6, pc}
 80a15a0:	f1c4 0400 	rsb	r4, r4, #0
 80a15a4:	3c20      	subs	r4, #32
 80a15a6:	da35      	bge.n	80a1614 <__aeabi_dmul+0x164>
 80a15a8:	340c      	adds	r4, #12
 80a15aa:	dc1b      	bgt.n	80a15e4 <__aeabi_dmul+0x134>
 80a15ac:	f104 0414 	add.w	r4, r4, #20
 80a15b0:	f1c4 0520 	rsb	r5, r4, #32
 80a15b4:	fa00 f305 	lsl.w	r3, r0, r5
 80a15b8:	fa20 f004 	lsr.w	r0, r0, r4
 80a15bc:	fa01 f205 	lsl.w	r2, r1, r5
 80a15c0:	ea40 0002 	orr.w	r0, r0, r2
 80a15c4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80a15c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a15cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a15d0:	fa21 f604 	lsr.w	r6, r1, r4
 80a15d4:	eb42 0106 	adc.w	r1, r2, r6
 80a15d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a15dc:	bf08      	it	eq
 80a15de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a15e2:	bd70      	pop	{r4, r5, r6, pc}
 80a15e4:	f1c4 040c 	rsb	r4, r4, #12
 80a15e8:	f1c4 0520 	rsb	r5, r4, #32
 80a15ec:	fa00 f304 	lsl.w	r3, r0, r4
 80a15f0:	fa20 f005 	lsr.w	r0, r0, r5
 80a15f4:	fa01 f204 	lsl.w	r2, r1, r4
 80a15f8:	ea40 0002 	orr.w	r0, r0, r2
 80a15fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a1600:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a1604:	f141 0100 	adc.w	r1, r1, #0
 80a1608:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a160c:	bf08      	it	eq
 80a160e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a1612:	bd70      	pop	{r4, r5, r6, pc}
 80a1614:	f1c4 0520 	rsb	r5, r4, #32
 80a1618:	fa00 f205 	lsl.w	r2, r0, r5
 80a161c:	ea4e 0e02 	orr.w	lr, lr, r2
 80a1620:	fa20 f304 	lsr.w	r3, r0, r4
 80a1624:	fa01 f205 	lsl.w	r2, r1, r5
 80a1628:	ea43 0302 	orr.w	r3, r3, r2
 80a162c:	fa21 f004 	lsr.w	r0, r1, r4
 80a1630:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a1634:	fa21 f204 	lsr.w	r2, r1, r4
 80a1638:	ea20 0002 	bic.w	r0, r0, r2
 80a163c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80a1640:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a1644:	bf08      	it	eq
 80a1646:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a164a:	bd70      	pop	{r4, r5, r6, pc}
 80a164c:	f094 0f00 	teq	r4, #0
 80a1650:	d10f      	bne.n	80a1672 <__aeabi_dmul+0x1c2>
 80a1652:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80a1656:	0040      	lsls	r0, r0, #1
 80a1658:	eb41 0101 	adc.w	r1, r1, r1
 80a165c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a1660:	bf08      	it	eq
 80a1662:	3c01      	subeq	r4, #1
 80a1664:	d0f7      	beq.n	80a1656 <__aeabi_dmul+0x1a6>
 80a1666:	ea41 0106 	orr.w	r1, r1, r6
 80a166a:	f095 0f00 	teq	r5, #0
 80a166e:	bf18      	it	ne
 80a1670:	4770      	bxne	lr
 80a1672:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80a1676:	0052      	lsls	r2, r2, #1
 80a1678:	eb43 0303 	adc.w	r3, r3, r3
 80a167c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80a1680:	bf08      	it	eq
 80a1682:	3d01      	subeq	r5, #1
 80a1684:	d0f7      	beq.n	80a1676 <__aeabi_dmul+0x1c6>
 80a1686:	ea43 0306 	orr.w	r3, r3, r6
 80a168a:	4770      	bx	lr
 80a168c:	ea94 0f0c 	teq	r4, ip
 80a1690:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a1694:	bf18      	it	ne
 80a1696:	ea95 0f0c 	teqne	r5, ip
 80a169a:	d00c      	beq.n	80a16b6 <__aeabi_dmul+0x206>
 80a169c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a16a0:	bf18      	it	ne
 80a16a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a16a6:	d1d1      	bne.n	80a164c <__aeabi_dmul+0x19c>
 80a16a8:	ea81 0103 	eor.w	r1, r1, r3
 80a16ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a16b0:	f04f 0000 	mov.w	r0, #0
 80a16b4:	bd70      	pop	{r4, r5, r6, pc}
 80a16b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a16ba:	bf06      	itte	eq
 80a16bc:	4610      	moveq	r0, r2
 80a16be:	4619      	moveq	r1, r3
 80a16c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a16c4:	d019      	beq.n	80a16fa <__aeabi_dmul+0x24a>
 80a16c6:	ea94 0f0c 	teq	r4, ip
 80a16ca:	d102      	bne.n	80a16d2 <__aeabi_dmul+0x222>
 80a16cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80a16d0:	d113      	bne.n	80a16fa <__aeabi_dmul+0x24a>
 80a16d2:	ea95 0f0c 	teq	r5, ip
 80a16d6:	d105      	bne.n	80a16e4 <__aeabi_dmul+0x234>
 80a16d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80a16dc:	bf1c      	itt	ne
 80a16de:	4610      	movne	r0, r2
 80a16e0:	4619      	movne	r1, r3
 80a16e2:	d10a      	bne.n	80a16fa <__aeabi_dmul+0x24a>
 80a16e4:	ea81 0103 	eor.w	r1, r1, r3
 80a16e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a16ec:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a16f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a16f4:	f04f 0000 	mov.w	r0, #0
 80a16f8:	bd70      	pop	{r4, r5, r6, pc}
 80a16fa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a16fe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80a1702:	bd70      	pop	{r4, r5, r6, pc}

080a1704 <__aeabi_ddiv>:
 80a1704:	b570      	push	{r4, r5, r6, lr}
 80a1706:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a170a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a170e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a1712:	bf1d      	ittte	ne
 80a1714:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a1718:	ea94 0f0c 	teqne	r4, ip
 80a171c:	ea95 0f0c 	teqne	r5, ip
 80a1720:	f000 f8a7 	bleq	80a1872 <__aeabi_ddiv+0x16e>
 80a1724:	eba4 0405 	sub.w	r4, r4, r5
 80a1728:	ea81 0e03 	eor.w	lr, r1, r3
 80a172c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a1730:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a1734:	f000 8088 	beq.w	80a1848 <__aeabi_ddiv+0x144>
 80a1738:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a173c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80a1740:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80a1744:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80a1748:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80a174c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80a1750:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80a1754:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80a1758:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80a175c:	429d      	cmp	r5, r3
 80a175e:	bf08      	it	eq
 80a1760:	4296      	cmpeq	r6, r2
 80a1762:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80a1766:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80a176a:	d202      	bcs.n	80a1772 <__aeabi_ddiv+0x6e>
 80a176c:	085b      	lsrs	r3, r3, #1
 80a176e:	ea4f 0232 	mov.w	r2, r2, rrx
 80a1772:	1ab6      	subs	r6, r6, r2
 80a1774:	eb65 0503 	sbc.w	r5, r5, r3
 80a1778:	085b      	lsrs	r3, r3, #1
 80a177a:	ea4f 0232 	mov.w	r2, r2, rrx
 80a177e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80a1782:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80a1786:	ebb6 0e02 	subs.w	lr, r6, r2
 80a178a:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a178e:	bf22      	ittt	cs
 80a1790:	1ab6      	subcs	r6, r6, r2
 80a1792:	4675      	movcs	r5, lr
 80a1794:	ea40 000c 	orrcs.w	r0, r0, ip
 80a1798:	085b      	lsrs	r3, r3, #1
 80a179a:	ea4f 0232 	mov.w	r2, r2, rrx
 80a179e:	ebb6 0e02 	subs.w	lr, r6, r2
 80a17a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a17a6:	bf22      	ittt	cs
 80a17a8:	1ab6      	subcs	r6, r6, r2
 80a17aa:	4675      	movcs	r5, lr
 80a17ac:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80a17b0:	085b      	lsrs	r3, r3, #1
 80a17b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80a17b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80a17ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a17be:	bf22      	ittt	cs
 80a17c0:	1ab6      	subcs	r6, r6, r2
 80a17c2:	4675      	movcs	r5, lr
 80a17c4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80a17c8:	085b      	lsrs	r3, r3, #1
 80a17ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80a17ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80a17d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a17d6:	bf22      	ittt	cs
 80a17d8:	1ab6      	subcs	r6, r6, r2
 80a17da:	4675      	movcs	r5, lr
 80a17dc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80a17e0:	ea55 0e06 	orrs.w	lr, r5, r6
 80a17e4:	d018      	beq.n	80a1818 <__aeabi_ddiv+0x114>
 80a17e6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80a17ea:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80a17ee:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80a17f2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80a17f6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80a17fa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80a17fe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80a1802:	d1c0      	bne.n	80a1786 <__aeabi_ddiv+0x82>
 80a1804:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a1808:	d10b      	bne.n	80a1822 <__aeabi_ddiv+0x11e>
 80a180a:	ea41 0100 	orr.w	r1, r1, r0
 80a180e:	f04f 0000 	mov.w	r0, #0
 80a1812:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80a1816:	e7b6      	b.n	80a1786 <__aeabi_ddiv+0x82>
 80a1818:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a181c:	bf04      	itt	eq
 80a181e:	4301      	orreq	r1, r0
 80a1820:	2000      	moveq	r0, #0
 80a1822:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a1826:	bf88      	it	hi
 80a1828:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a182c:	f63f aeaf 	bhi.w	80a158e <__aeabi_dmul+0xde>
 80a1830:	ebb5 0c03 	subs.w	ip, r5, r3
 80a1834:	bf04      	itt	eq
 80a1836:	ebb6 0c02 	subseq.w	ip, r6, r2
 80a183a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a183e:	f150 0000 	adcs.w	r0, r0, #0
 80a1842:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a1846:	bd70      	pop	{r4, r5, r6, pc}
 80a1848:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80a184c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80a1850:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80a1854:	bfc2      	ittt	gt
 80a1856:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a185a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a185e:	bd70      	popgt	{r4, r5, r6, pc}
 80a1860:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a1864:	f04f 0e00 	mov.w	lr, #0
 80a1868:	3c01      	subs	r4, #1
 80a186a:	e690      	b.n	80a158e <__aeabi_dmul+0xde>
 80a186c:	ea45 0e06 	orr.w	lr, r5, r6
 80a1870:	e68d      	b.n	80a158e <__aeabi_dmul+0xde>
 80a1872:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a1876:	ea94 0f0c 	teq	r4, ip
 80a187a:	bf08      	it	eq
 80a187c:	ea95 0f0c 	teqeq	r5, ip
 80a1880:	f43f af3b 	beq.w	80a16fa <__aeabi_dmul+0x24a>
 80a1884:	ea94 0f0c 	teq	r4, ip
 80a1888:	d10a      	bne.n	80a18a0 <__aeabi_ddiv+0x19c>
 80a188a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a188e:	f47f af34 	bne.w	80a16fa <__aeabi_dmul+0x24a>
 80a1892:	ea95 0f0c 	teq	r5, ip
 80a1896:	f47f af25 	bne.w	80a16e4 <__aeabi_dmul+0x234>
 80a189a:	4610      	mov	r0, r2
 80a189c:	4619      	mov	r1, r3
 80a189e:	e72c      	b.n	80a16fa <__aeabi_dmul+0x24a>
 80a18a0:	ea95 0f0c 	teq	r5, ip
 80a18a4:	d106      	bne.n	80a18b4 <__aeabi_ddiv+0x1b0>
 80a18a6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a18aa:	f43f aefd 	beq.w	80a16a8 <__aeabi_dmul+0x1f8>
 80a18ae:	4610      	mov	r0, r2
 80a18b0:	4619      	mov	r1, r3
 80a18b2:	e722      	b.n	80a16fa <__aeabi_dmul+0x24a>
 80a18b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a18b8:	bf18      	it	ne
 80a18ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a18be:	f47f aec5 	bne.w	80a164c <__aeabi_dmul+0x19c>
 80a18c2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80a18c6:	f47f af0d 	bne.w	80a16e4 <__aeabi_dmul+0x234>
 80a18ca:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80a18ce:	f47f aeeb 	bne.w	80a16a8 <__aeabi_dmul+0x1f8>
 80a18d2:	e712      	b.n	80a16fa <__aeabi_dmul+0x24a>

080a18d4 <__aeabi_d2f>:
 80a18d4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80a18d8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80a18dc:	bf24      	itt	cs
 80a18de:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80a18e2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80a18e6:	d90d      	bls.n	80a1904 <__aeabi_d2f+0x30>
 80a18e8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a18ec:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80a18f0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80a18f4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80a18f8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80a18fc:	bf08      	it	eq
 80a18fe:	f020 0001 	biceq.w	r0, r0, #1
 80a1902:	4770      	bx	lr
 80a1904:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80a1908:	d121      	bne.n	80a194e <__aeabi_d2f+0x7a>
 80a190a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80a190e:	bfbc      	itt	lt
 80a1910:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80a1914:	4770      	bxlt	lr
 80a1916:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a191a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80a191e:	f1c2 0218 	rsb	r2, r2, #24
 80a1922:	f1c2 0c20 	rsb	ip, r2, #32
 80a1926:	fa10 f30c 	lsls.w	r3, r0, ip
 80a192a:	fa20 f002 	lsr.w	r0, r0, r2
 80a192e:	bf18      	it	ne
 80a1930:	f040 0001 	orrne.w	r0, r0, #1
 80a1934:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a1938:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80a193c:	fa03 fc0c 	lsl.w	ip, r3, ip
 80a1940:	ea40 000c 	orr.w	r0, r0, ip
 80a1944:	fa23 f302 	lsr.w	r3, r3, r2
 80a1948:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80a194c:	e7cc      	b.n	80a18e8 <__aeabi_d2f+0x14>
 80a194e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80a1952:	d107      	bne.n	80a1964 <__aeabi_d2f+0x90>
 80a1954:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80a1958:	bf1e      	ittt	ne
 80a195a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80a195e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80a1962:	4770      	bxne	lr
 80a1964:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80a1968:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a196c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a1970:	4770      	bx	lr
 80a1972:	bf00      	nop

080a1974 <__aeabi_f2iz>:
 80a1974:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80a1978:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80a197c:	d30f      	bcc.n	80a199e <__aeabi_f2iz+0x2a>
 80a197e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80a1982:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80a1986:	d90d      	bls.n	80a19a4 <__aeabi_f2iz+0x30>
 80a1988:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80a198c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a1990:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80a1994:	fa23 f002 	lsr.w	r0, r3, r2
 80a1998:	bf18      	it	ne
 80a199a:	4240      	negne	r0, r0
 80a199c:	4770      	bx	lr
 80a199e:	f04f 0000 	mov.w	r0, #0
 80a19a2:	4770      	bx	lr
 80a19a4:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80a19a8:	d101      	bne.n	80a19ae <__aeabi_f2iz+0x3a>
 80a19aa:	0242      	lsls	r2, r0, #9
 80a19ac:	d105      	bne.n	80a19ba <__aeabi_f2iz+0x46>
 80a19ae:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 80a19b2:	bf08      	it	eq
 80a19b4:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80a19b8:	4770      	bx	lr
 80a19ba:	f04f 0000 	mov.w	r0, #0
 80a19be:	4770      	bx	lr

080a19c0 <__cxa_atexit>:
 80a19c0:	b510      	push	{r4, lr}
 80a19c2:	4c05      	ldr	r4, [pc, #20]	; (80a19d8 <__cxa_atexit+0x18>)
 80a19c4:	4613      	mov	r3, r2
 80a19c6:	b12c      	cbz	r4, 80a19d4 <__cxa_atexit+0x14>
 80a19c8:	460a      	mov	r2, r1
 80a19ca:	4601      	mov	r1, r0
 80a19cc:	2002      	movs	r0, #2
 80a19ce:	f3af 8000 	nop.w
 80a19d2:	bd10      	pop	{r4, pc}
 80a19d4:	4620      	mov	r0, r4
 80a19d6:	bd10      	pop	{r4, pc}
 80a19d8:	00000000 	.word	0x00000000

080a19dc <memcpy>:
 80a19dc:	b510      	push	{r4, lr}
 80a19de:	1e43      	subs	r3, r0, #1
 80a19e0:	440a      	add	r2, r1
 80a19e2:	4291      	cmp	r1, r2
 80a19e4:	d004      	beq.n	80a19f0 <memcpy+0x14>
 80a19e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a19ea:	f803 4f01 	strb.w	r4, [r3, #1]!
 80a19ee:	e7f8      	b.n	80a19e2 <memcpy+0x6>
 80a19f0:	bd10      	pop	{r4, pc}

080a19f2 <memset>:
 80a19f2:	4603      	mov	r3, r0
 80a19f4:	4402      	add	r2, r0
 80a19f6:	4293      	cmp	r3, r2
 80a19f8:	d002      	beq.n	80a1a00 <memset+0xe>
 80a19fa:	f803 1b01 	strb.w	r1, [r3], #1
 80a19fe:	e7fa      	b.n	80a19f6 <memset+0x4>
 80a1a00:	4770      	bx	lr
	...

080a1a04 <srand>:
 80a1a04:	b538      	push	{r3, r4, r5, lr}
 80a1a06:	4b12      	ldr	r3, [pc, #72]	; (80a1a50 <srand+0x4c>)
 80a1a08:	4605      	mov	r5, r0
 80a1a0a:	681c      	ldr	r4, [r3, #0]
 80a1a0c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a1a0e:	b9d3      	cbnz	r3, 80a1a46 <srand+0x42>
 80a1a10:	2018      	movs	r0, #24
 80a1a12:	f7fe fd55 	bl	80a04c0 <malloc>
 80a1a16:	f243 330e 	movw	r3, #13070	; 0x330e
 80a1a1a:	63a0      	str	r0, [r4, #56]	; 0x38
 80a1a1c:	8003      	strh	r3, [r0, #0]
 80a1a1e:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 80a1a22:	8043      	strh	r3, [r0, #2]
 80a1a24:	f241 2334 	movw	r3, #4660	; 0x1234
 80a1a28:	8083      	strh	r3, [r0, #4]
 80a1a2a:	f24e 636d 	movw	r3, #58989	; 0xe66d
 80a1a2e:	80c3      	strh	r3, [r0, #6]
 80a1a30:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 80a1a34:	8103      	strh	r3, [r0, #8]
 80a1a36:	2305      	movs	r3, #5
 80a1a38:	8143      	strh	r3, [r0, #10]
 80a1a3a:	230b      	movs	r3, #11
 80a1a3c:	8183      	strh	r3, [r0, #12]
 80a1a3e:	2201      	movs	r2, #1
 80a1a40:	2300      	movs	r3, #0
 80a1a42:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80a1a46:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a1a48:	2200      	movs	r2, #0
 80a1a4a:	611d      	str	r5, [r3, #16]
 80a1a4c:	615a      	str	r2, [r3, #20]
 80a1a4e:	bd38      	pop	{r3, r4, r5, pc}
 80a1a50:	20000068 	.word	0x20000068

080a1a54 <strlen>:
 80a1a54:	4603      	mov	r3, r0
 80a1a56:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a1a5a:	2a00      	cmp	r2, #0
 80a1a5c:	d1fb      	bne.n	80a1a56 <strlen+0x2>
 80a1a5e:	1a18      	subs	r0, r3, r0
 80a1a60:	3801      	subs	r0, #1
 80a1a62:	4770      	bx	lr

080a1a64 <dynalib_user>:
 80a1a64:	001d 080a 005d 080a 0089 080a 008d 080a     ....]...........
 80a1a74:	0000 0000 6e69 7469 6169 696c 6973 676e     ....initialising
 80a1a84:	6300 726f 6572 7463 7220 6165 2064 6f63     .correct read co
 80a1a94:	6e75 0074                                   unt.

080a1a98 <_ZTV8SPIClass>:
	...
 80a1aa0:	04e1 080a 04e3 080a 6162 6475 5300 7265     ........baud.Ser
 80a1ab0:	6169 006c 5355 5342 7265 6169 316c 7400     ial.USBSerial1.t
 80a1ac0:	7079 0065 6170 6172 006d 6d63 0064 6469     ype.param.cmd.id
 80a1ad0:	6800 646e 7300 7274 006d 6966 746c 6c00     .hnd.strm.filt.l
 80a1ae0:	6c76 6100 6464 6148 646e 656c 0072 6572     vl.addHandler.re
 80a1af0:	6f6d 6576 6148 646e 656c 0072 6e65 6d75     moveHandler.enum
 80a1b00:	6148 646e 656c 7372 4a00 4f53 534e 7274     Handlers.JSONStr
 80a1b10:	6165 4c6d 676f 6148 646e 656c 0072 7061     eamLogHandler.ap
 80a1b20:	0070 3025 3031 2075 5d00 0020 6425 2c00     p.%010u .] .%d.,
 80a1b30:	0020 2928 203a 2000 005b 6f63 6564 3d20      .(): . [.code =
 80a1b40:	0020 6925 6400 7465 6961 736c 3d20 0020      .%i.details = .
 80a1b50:	0a0d 6600 6c00 006e 6e66 6300 646f 0065     ...f.ln.fn.code.
 80a1b60:	6564 6174 6c69 6e00 6e6f 0065 7274 6361     detail.none.trac
 80a1b70:	0065 6e69 6f66 7700 7261 006e 7265 6f72     e.info.warn.erro
 80a1b80:	0072 6170 696e 0063 6c61 006c 005a 2b25     r.panic.all.Z.%+
 80a1b90:	3330 3a64 3025 7532 2500 2d59 6d25 252d     03d:%02u.%Y-%m-%
 80a1ba0:	5464 4825 253a 3a4d 5325 7a25 6100 6373     dT%H:%M:%S%z.asc
 80a1bb0:	6974 656d 0000 0000                         time....

080a1bb8 <_ZTV9IPAddress>:
	...
 80a1bc0:	0855 080a 0845 080a 0847 080a               U...E...G...

080a1bcc <_ZTV9USBSerial>:
	...
 80a1bd4:	0911 080a 0961 080a 096f 080a 05b1 080a     ....a...o.......
 80a1be4:	094d 080a 0913 080a 0929 080a 095b 080a     M.......)...[...
 80a1bf4:	093f 080a 090d 080a                         ?.......

080a1bfc <_ZTV11USARTSerial>:
	...
 80a1c04:	0ab1 080a 0b01 080a 0b0f 080a 05b1 080a     ................
 80a1c14:	0ac5 080a 0ae7 080a 0ad3 080a 0afb 080a     ................
 80a1c24:	0ab3 080a 0ab7 080a                         ........

080a1c2c <_ZTV7TwoWire>:
	...
 80a1c34:	0bad 080a 0bf7 080a 0bcf 080a 0baf 080a     ................
 80a1c44:	0bd7 080a 0bdf 080a 0be7 080a 0bef 080a     ................

080a1c54 <_ZTVN5spark9WiFiClassE>:
	...
 80a1c5c:	0d03 080a 0cf9 080a 0cef 080a 0c6d 080a     ............m...
 80a1c6c:	0687 080a 0ce3 080a 0cd7 080a 0ccf 080a     ................
 80a1c7c:	0cc5 080a 0cbb 080a 0c77 080a               ........w...

080a1c88 <_ZTVN5spark12NetworkClassE>:
	...
 80a1c90:	0d21 080a 0d2b 080a 0d35 080a 0d3f 080a     !...+...5...?...
 80a1ca0:	0d49 080a 0d55 080a 0d61 080a 0d6d 080a     I...U...a...m...
 80a1cb0:	0d75 080a 0d7f 080a 0d89 080a               u...........

080a1cbc <__sf_fake_stdin>:
	...

080a1cdc <__sf_fake_stdout>:
	...

080a1cfc <__sf_fake_stderr>:
	...
 80a1d1c:	0043                                        C.

080a1d1e <link_const_variable_data_end>:
	...

080a1d20 <link_constructors_location>:
 80a1d20:	080a01d1 	.word	0x080a01d1
 80a1d24:	080a0599 	.word	0x080a0599
 80a1d28:	080a0695 	.word	0x080a0695
 80a1d2c:	080a06a5 	.word	0x080a06a5
 80a1d30:	080a06f1 	.word	0x080a06f1
 80a1d34:	080a0d0d 	.word	0x080a0d0d
 80a1d38:	080a0dd9 	.word	0x080a0dd9
 80a1d3c:	080a0ded 	.word	0x080a0ded
 80a1d40:	080a0e31 	.word	0x080a0e31
 80a1d44:	080a0eb1 	.word	0x080a0eb1
 80a1d48:	080a0f35 	.word	0x080a0f35
 80a1d4c:	080a0ff9 	.word	0x080a0ff9
 80a1d50:	080a10bd 	.word	0x080a10bd

080a1d54 <link_constructors_end>:
	...
